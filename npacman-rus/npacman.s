;
; File generated by cc65 v 2.19 - Git c674b7ced
;
	.fopt		compiler,"cc65 v 2.19 - Git c674b7ced"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_rand8
	.import		_set_rand
	.import		_vram_adr
	.import		_vram_unrle
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.export		_CHERRY_SPR
	.export		_DOOR_SPR
	.export		_PACMAN_0
	.export		_PACMAN_L1
	.export		_PACMAN_L2
	.export		_PACMAN_R1
	.export		_PACMAN_R2
	.export		_PACMAN_UP1
	.export		_PACMAN_UP2
	.export		_PACMAN_D1
	.export		_PACMAN_D2
	.export		_PACGIRL_0
	.export		_PACGIRL_1
	.export		_PACGIRL_L1
	.export		_PACGIRL_L2
	.export		_PACGIRL_R1
	.export		_PACGIRL_R2
	.export		_PACGIRL_UP1
	.export		_PACGIRL_UP2
	.export		_PACGIRL_D1
	.export		_PACGIRL_D2
	.export		_RED_L1
	.export		_RED_L2
	.export		_RED_R1
	.export		_RED_R2
	.export		_RED_D1
	.export		_RED_D2
	.export		_RED_UP1
	.export		_RED_UP2
	.export		_SPIRIT1
	.export		_SPIRIT2
	.export		_n1
	.export		_n2
	.export		_STATE_SELECT
	.export		_STATE_GAME
	.export		_STATE_RESULT
	.export		_FOOD
	.export		_POWER_FOOD
	.export		_DOOR
	.export		_EMPTY
	.export		_PACMAN
	.export		_PACGIRL
	.export		_RED
	.export		_SHADOW
	.export		_CHERRY
	.export		_paletteForBackground
	.export		_paletteForSprites
	.export		_map1
	.export		_map2
	.export		_map3
	.export		_pad1
	.export		_pad2
	.export		_text
	.export		_address
	.export		_gameState
	.export		_pacmanX
	.export		_pacmanY
	.export		_pacGirlX
	.export		_pacGirlY
	.export		_oldX
	.export		_oldY
	.export		_pacmanSprite
	.export		_pacGirlSprite
	.export		_dx
	.export		_dy
	.export		_dxPacGirl
	.export		_dyPacGirl
	.export		_oldPacGirlX
	.export		_oldPacGirlY
	.export		_dxRed
	.export		_dyRed
	.export		_redX
	.export		_redY
	.export		_oldXRed
	.export		_oldYRed
	.export		_redSprite
	.export		_redFlag
	.export		_redTime
	.export		_cherryFlag
	.export		_refreshCherry
	.export		_cherryX
	.export		_cherryY
	.export		_doorX
	.export		_doorY
	.export		_refreshDoor
	.export		_oldRedVal
	.export		_oldPacGirlVal
	.export		_redBonus
	.export		_powerBonus
	.export		_cherryBonus
	.export		_pacmanLastUpdateTime
	.export		_redLastUpdateTime
	.export		_pacGirlLastUpdateTime
	.export		_cherryTime
	.export		_i
	.export		_j
	.export		_val
	.export		_val2
	.export		_y
	.export		_x
	.export		_players
	.export		_playersTime
	.export		_food001
	.export		_food010
	.export		_food100
	.export		_score001
	.export		_score010
	.export		_score100
	.export		_setValToMap
	.export		_getValFromMap
	.export		_isNotWall
	.export		_isNotWallOrDoor
	.export		_openDoors
	.export		_closeDoors
	.export		_incFood
	.export		_calcScore
	.export		_init
	.export		_pacmanLooser
	.export		_pacManState
	.export		_redState
	.export		_pacGirlState
	.export		_actions
	.export		_draw
	.export		_drawBackground
	.export		_drawSprites
	.export		_drawText
	.export		_drawBlackBox
	.export		_refreshGame
	.export		_main

.segment	"DATA"

_map1:
	.byte	$37,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$39,$35
	.byte	$37,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$39,$00
	.byte	$34,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$36,$35
	.byte	$34,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$36,$00
	.byte	$34,$2A,$69,$32,$32,$30,$2E,$69,$32,$32,$32,$32,$30,$2E,$6C,$38
	.byte	$64,$2E,$69,$32,$32,$32,$32,$30,$2E,$69,$32,$32,$30,$2A,$36,$00
	.byte	$34,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$51
	.byte	$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$36,$00
	.byte	$34,$2E,$69,$32,$32,$30,$2E,$66,$78,$6A,$2E,$69,$32,$32,$6D,$78
	.byte	$6E,$32,$32,$30,$2E,$66,$78,$6A,$2E,$69,$32,$32,$30,$2E,$36,$00
	.byte	$34,$2E,$2E,$2E,$2E,$2E,$2E,$36,$35,$34,$2E,$2E,$2E,$2E,$36,$35
	.byte	$34,$2E,$2E,$2E,$2E,$36,$35,$34,$2E,$2E,$2E,$2E,$2E,$2E,$36,$00
	.byte	$31,$78,$78,$78,$78,$6A,$2E,$36,$35,$73,$32,$32,$30,$2E,$6C,$38
	.byte	$64,$2E,$32,$32,$32,$65,$35,$34,$2E,$66,$78,$78,$78,$78,$33,$00
	.byte	$35,$35,$35,$35,$35,$34,$2E,$36,$35,$34,$2E,$2E,$2E,$2E,$2E,$2E
	.byte	$2E,$2E,$2E,$2E,$2E,$36,$35,$34,$2E,$36,$35,$35,$35,$35,$35,$00
_map2:
	.byte	$35,$35,$35,$35,$35,$34,$2E,$36,$35,$34,$2E,$66,$78,$78,$6A,$2D
	.byte	$66,$78,$78,$6A,$2E,$36,$35,$34,$2E,$36,$35,$35,$35,$35,$35,$00
	.byte	$38,$38,$38,$38,$38,$64,$2E,$6C,$38,$64,$2E,$36,$37,$38,$64,$20
	.byte	$6C,$38,$39,$34,$2E,$6C,$38,$64,$2E,$6C,$38,$38,$38,$38,$38,$00
	.byte	$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$36,$34,$20,$20,$25
	.byte	$20,$20,$36,$34,$2E,$2E,$5E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$00
	.byte	$78,$78,$78,$78,$78,$6A,$2E,$66,$78,$6A,$2E,$36,$31,$78,$78,$78
	.byte	$78,$78,$33,$34,$2E,$66,$78,$6A,$2E,$66,$78,$78,$78,$78,$78,$00
	.byte	$35,$35,$35,$35,$35,$34,$2E,$36,$35,$34,$2E,$6C,$38,$38,$38,$38
	.byte	$38,$38,$38,$64,$2E,$36,$35,$34,$2E,$36,$35,$35,$35,$35,$35,$00
	.byte	$35,$35,$35,$35,$35,$34,$2E,$36,$35,$34,$2E,$2E,$2E,$2E,$2E,$2E
	.byte	$2E,$2E,$2E,$2E,$2E,$36,$35,$34,$2E,$36,$35,$35,$35,$35,$35,$00
	.byte	$37,$38,$38,$38,$38,$64,$2E,$6C,$38,$64,$2E,$69,$32,$32,$6D,$78
	.byte	$6E,$32,$32,$30,$2E,$6C,$38,$64,$2E,$6C,$38,$38,$38,$38,$39,$00
	.byte	$34,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$36,$35
	.byte	$34,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$36,$00
_map3:
	.byte	$34,$2E,$69,$32,$6D,$6A,$2E,$69,$32,$32,$32,$32,$30,$2E,$6C,$38
	.byte	$64,$2E,$69,$32,$32,$32,$32,$30,$2E,$66,$6E,$32,$30,$2E,$36,$00
	.byte	$34,$2A,$2E,$2E,$36,$34,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$4F
	.byte	$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$36,$34,$2E,$2E,$2A,$36,$00
	.byte	$73,$32,$30,$2E,$6C,$64,$2E,$66,$78,$6A,$2E,$69,$32,$32,$6D,$78
	.byte	$6E,$32,$32,$30,$2E,$66,$78,$6A,$2E,$6C,$64,$2E,$69,$32,$65,$00
	.byte	$34,$2E,$2E,$2E,$2E,$2E,$2E,$36,$35,$34,$2E,$2E,$2E,$2E,$36,$35
	.byte	$34,$2E,$2E,$2E,$2E,$36,$35,$34,$2E,$2E,$2E,$2E,$2E,$2E,$36,$00
	.byte	$34,$2E,$69,$32,$32,$32,$32,$79,$38,$7A,$32,$32,$30,$2E,$6C,$38
	.byte	$64,$2E,$69,$32,$32,$79,$38,$7A,$32,$32,$32,$32,$30,$2E,$36,$00
	.byte	$34,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E
	.byte	$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$36,$00
	.byte	$31,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78
	.byte	$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$78,$33,$00
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
_gameState:
	.byte	$00
_pacmanX:
	.word	$000F
_pacmanY:
	.word	$0011
_pacGirlX:
	.word	$000F
_pacGirlY:
	.word	$0003
_oldX:
	.word	$000F
_oldY:
	.word	$0011
_pacmanSprite:
	.byte	$01
_pacGirlSprite:
	.byte	$01
_dx:
	.word	$0000
_dy:
	.word	$0000
_dxPacGirl:
	.word	$0000
_dyPacGirl:
	.word	$0000
_oldPacGirlX:
	.word	$000F
_oldPacGirlY:
	.word	$0003
_dxRed:
	.word	$0001
_dyRed:
	.word	$0000
_redX:
	.word	$0016
_redY:
	.word	$000A
_oldXRed:
	.word	$0016
_oldYRed:
	.word	$000A
_redSprite:
	.byte	$01
_redFlag:
	.byte	$01
_redTime:
	.byte	$00
_cherryFlag:
	.byte	$00
_refreshCherry:
	.byte	$00
_cherryX:
	.byte	$0F
_cherryY:
	.byte	$0A
_doorX:
	.byte	$0F
_doorY:
	.byte	$08
_refreshDoor:
	.byte	$01
_oldRedVal:
	.byte	$2E
_oldPacGirlVal:
	.byte	$2E
_redBonus:
	.byte	$00
_powerBonus:
	.byte	$00
_cherryBonus:
	.byte	$00
_pacmanLastUpdateTime:
	.byte	$09
_redLastUpdateTime:
	.byte	$04
_pacGirlLastUpdateTime:
	.byte	$06
_cherryTime:
	.byte	$FF
_i:
	.byte	$00
_j:
	.byte	$00
_players:
	.byte	$01
_playersTime:
	.byte	$00
_food001:
	.byte	$01
_food010:
	.byte	$00
_food100:
	.byte	$00
_score001:
	.byte	$00
_score010:
	.byte	$00
_score100:
	.byte	$00

.segment	"RODATA"

_CHERRY_SPR:
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$7A
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$7B
	.byte	$01
	.byte	$80
_DOOR_SPR:
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6D
	.byte	$01
	.byte	$80
_PACMAN_0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_PACMAN_L1:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_PACMAN_L2:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$80
_PACMAN_R1:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$80
_PACMAN_R2:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$80
_PACMAN_UP1:
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1B
	.byte	$00
	.byte	$80
_PACMAN_UP2:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$80
_PACMAN_D1:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$80
_PACMAN_D2:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$00
	.byte	$80
_PACGIRL_0:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$00
	.byte	$80
_PACGIRL_1:
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$00
	.byte	$80
_PACGIRL_L1:
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$00
	.byte	$80
_PACGIRL_L2:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$51
	.byte	$00
	.byte	$80
_PACGIRL_R1:
	.byte	$00
	.byte	$00
	.byte	$2E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$3E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$3F
	.byte	$00
	.byte	$80
_PACGIRL_R2:
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$00
	.byte	$80
_PACGIRL_UP1:
	.byte	$00
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$3A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$3B
	.byte	$00
	.byte	$80
_PACGIRL_UP2:
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$38
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$39
	.byte	$00
	.byte	$80
_PACGIRL_D1:
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$37
	.byte	$00
	.byte	$80
_PACGIRL_D2:
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_RED_L1:
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$47
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$57
	.byte	$02
	.byte	$80
_RED_L2:
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$49
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$58
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$02
	.byte	$80
_RED_R1:
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5A
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5B
	.byte	$02
	.byte	$80
_RED_R2:
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$02
	.byte	$80
_RED_D1:
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5F
	.byte	$02
	.byte	$80
_RED_D2:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$02
	.byte	$80
_RED_UP1:
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$63
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$02
	.byte	$80
_RED_UP2:
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$74
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$02
	.byte	$80
_SPIRIT1:
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$76
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$03
	.byte	$80
_SPIRIT2:
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$79
	.byte	$03
	.byte	$80
_n1:
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$65
	.byte	$20
	.byte	$01
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$20
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$20
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$53
	.byte	$75
	.byte	$70
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$54
	.byte	$75
	.byte	$72
	.byte	$62
	.byte	$6F
	.byte	$00
	.byte	$4E
	.byte	$45
	.byte	$53
	.byte	$00
	.byte	$50
	.byte	$61
	.byte	$63
	.byte	$2D
	.byte	$4D
	.byte	$61
	.byte	$6E
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$20
	.byte	$F4
	.byte	$E8
	.byte	$E9
	.byte	$EC
	.byte	$F1
	.byte	$20
	.byte	$EC
	.byte	$EF
	.byte	$F4
	.byte	$FD
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$2B
	.byte	$DD
	.byte	$00
	.byte	$EC
	.byte	$EF
	.byte	$F4
	.byte	$F2
	.byte	$EE
	.byte	$00
	.byte	$01
	.byte	$38
	.byte	$DE
	.byte	$00
	.byte	$EC
	.byte	$EF
	.byte	$F4
	.byte	$F2
	.byte	$EE
	.byte	$E4
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$8D
	.byte	$B1
	.byte	$A0
	.byte	$A8
	.byte	$B1
	.byte	$A0
	.byte	$A1
	.byte	$AF
	.byte	$B3
	.byte	$B8
	.byte	$A9
	.byte	$AB
	.byte	$20
	.byte	$A8
	.byte	$A5
	.byte	$AD
	.byte	$B7
	.byte	$AF
	.byte	$A2
	.byte	$20
	.byte	$AD
	.byte	$A0
	.byte	$AB
	.byte	$B2
	.byte	$A9
	.byte	$AD
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$20
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$20
	.byte	$20
	.byte	$A4
	.byte	$A9
	.byte	$A8
	.byte	$A0
	.byte	$AA
	.byte	$AE
	.byte	$A5
	.byte	$B1
	.byte	$BC
	.byte	$20
	.byte	$A8
	.byte	$A5
	.byte	$AD
	.byte	$B7
	.byte	$AF
	.byte	$A2
	.byte	$BC
	.byte	$20
	.byte	$A5
	.byte	$A2
	.byte	$A0
	.byte	$20
	.byte	$A9
	.byte	$20
	.byte	$AC
	.byte	$A9
	.byte	$A8
	.byte	$A0
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$20
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$20
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$01
	.byte	$05
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$0A
	.byte	$76
	.byte	$31
	.byte	$2E
	.byte	$30
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$33
	.byte	$07
	.byte	$01
	.byte	$0B
	.byte	$00
	.byte	$07
	.byte	$01
	.byte	$15
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$20
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$AA
	.byte	$AA
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$A2
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$0A
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$00
_n2:
	.byte	$1A
	.byte	$00
	.byte	$07
	.byte	$1A
	.byte	$0C
	.byte	$00
	.byte	$1A
	.byte	$02
	.byte	$07
	.byte	$1A
	.byte	$0E
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$1A
	.byte	$0C
	.byte	$0A
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$1A
	.byte	$0C
	.byte	$0A
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$0C
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$0C
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$14
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$1A
	.byte	$03
	.byte	$19
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$0B
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$1A
	.byte	$03
	.byte	$19
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$14
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$1C
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$0F
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$16
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$0F
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$05
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$03
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$03
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$1A
	.byte	$03
	.byte	$0F
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$15
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$0B
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$0C
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$1A
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1A
	.byte	$04
	.byte	$04
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$0A
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$1A
	.byte	$04
	.byte	$00
	.byte	$05
	.byte	$1A
	.byte	$04
	.byte	$04
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$16
	.byte	$0F
	.byte	$00
	.byte	$0D
	.byte	$16
	.byte	$16
	.byte	$0F
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$1A
	.byte	$04
	.byte	$00
	.byte	$09
	.byte	$1A
	.byte	$04
	.byte	$0B
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$0B
	.byte	$13
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$0B
	.byte	$00
	.byte	$10
	.byte	$09
	.byte	$0A
	.byte	$04
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$0B
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$1A
	.byte	$04
	.byte	$00
	.byte	$13
	.byte	$1A
	.byte	$0A
	.byte	$06
	.byte	$04
	.byte	$07
	.byte	$1A
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$0A
	.byte	$00
	.byte	$16
	.byte	$1A
	.byte	$04
	.byte	$0F
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$0F
	.byte	$13
	.byte	$06
	.byte	$01
	.byte	$16
	.byte	$1A
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$0F
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$1A
	.byte	$04
	.byte	$00
	.byte	$05
	.byte	$1A
	.byte	$04
	.byte	$04
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$1A
	.byte	$06
	.byte	$0B
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$1A
	.byte	$04
	.byte	$00
	.byte	$05
	.byte	$1A
	.byte	$04
	.byte	$04
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$0A
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$06
	.byte	$05
	.byte	$1A
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$1A
	.byte	$03
	.byte	$0B
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$0B
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$16
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$0B
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$1A
	.byte	$03
	.byte	$0A
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$0C
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$0C
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$11
	.byte	$0F
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$1A
	.byte	$03
	.byte	$19
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$0B
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$1A
	.byte	$03
	.byte	$19
	.byte	$13
	.byte	$0D
	.byte	$12
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$14
	.byte	$13
	.byte	$13
	.byte	$06
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$12
	.byte	$06
	.byte	$04
	.byte	$13
	.byte	$13
	.byte	$14
	.byte	$06
	.byte	$00
	.byte	$15
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$10
	.byte	$0B
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$0F
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$16
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$0D
	.byte	$16
	.byte	$0F
	.byte	$13
	.byte	$10
	.byte	$0B
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$05
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$03
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$03
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$1A
	.byte	$03
	.byte	$17
	.byte	$09
	.byte	$18
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$13
	.byte	$10
	.byte	$09
	.byte	$0B
	.byte	$13
	.byte	$0E
	.byte	$02
	.byte	$02
	.byte	$17
	.byte	$09
	.byte	$18
	.byte	$02
	.byte	$1A
	.byte	$03
	.byte	$19
	.byte	$13
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$1A
	.byte	$1C
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$1A
	.byte	$1C
	.byte	$03
	.byte	$00
	.byte	$07
	.byte	$1A
	.byte	$02
	.byte	$83
	.byte	$84
	.byte	$07
	.byte	$1A
	.byte	$09
	.byte	$20
	.byte	$07
	.byte	$1A
	.byte	$12
	.byte	$93
	.byte	$94
	.byte	$90
	.byte	$30
	.byte	$20
	.byte	$1A
	.byte	$0D
	.byte	$80
	.byte	$90
	.byte	$30
	.byte	$1A
	.byte	$02
	.byte	$2F
	.byte	$32
	.byte	$37
	.byte	$31
	.byte	$07
	.byte	$1A
	.byte	$04
	.byte	$85
	.byte	$86
	.byte	$07
	.byte	$07
	.byte	$20
	.byte	$07
	.byte	$1A
	.byte	$0D
	.byte	$20
	.byte	$07
	.byte	$1A
	.byte	$0B
	.byte	$95
	.byte	$96
	.byte	$90
	.byte	$30
	.byte	$07
	.byte	$20
	.byte	$1A
	.byte	$0B
	.byte	$07
	.byte	$81
	.byte	$90
	.byte	$30
	.byte	$07
	.byte	$1A
	.byte	$0B
	.byte	$20
	.byte	$07
	.byte	$1A
	.byte	$1E
	.byte	$20
	.byte	$07
	.byte	$1A
	.byte	$08
	.byte	$00
	.byte	$07
	.byte	$1A
	.byte	$0F
	.byte	$00
	.byte	$1A
	.byte	$30
	.byte	$32
	.byte	$F5
	.byte	$F5
	.byte	$A5
	.byte	$01
	.byte	$00
	.byte	$1A
	.byte	$08
	.byte	$00
	.byte	$1A
	.byte	$00
_STATE_SELECT:
	.byte	$00
_STATE_GAME:
	.byte	$01
_STATE_RESULT:
	.byte	$02
_FOOD:
	.byte	$2E
_POWER_FOOD:
	.byte	$2A
_DOOR:
	.byte	$2D
_EMPTY:
	.byte	$20
_PACMAN:
	.byte	$4F
_PACGIRL:
	.byte	$51
_RED:
	.byte	$5E
_SHADOW:
	.byte	$40
_CHERRY:
	.byte	$25
_paletteForBackground:
	.byte	$0F
	.byte	$2A
	.byte	$11
	.byte	$10
	.byte	$0F
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$0F
	.byte	$10
	.byte	$14
	.byte	$11
	.byte	$0F
	.byte	$30
	.byte	$15
	.byte	$27
_paletteForSprites:
	.byte	$0F
	.byte	$30
	.byte	$15
	.byte	$38
	.byte	$0F
	.byte	$30
	.byte	$15
	.byte	$27
	.byte	$0F
	.byte	$30
	.byte	$15
	.byte	$11
	.byte	$0F
	.byte	$30
	.byte	$14
	.byte	$11

.segment	"BSS"

_pad1:
	.res	1,$00
_pad2:
	.res	1,$00
_text:
	.res	1,$00
_address:
	.res	2,$00
_val:
	.res	1,$00
_val2:
	.res	1,$00
_y:
	.res	1,$00
_x:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ setValToMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setValToMap: near

.segment	"CODE"

;
; if (j < MAP_SIZE_Y8) {
;
	lda     _j
	cmp     #$08
	bcs     L0013
;
; map1[j][i] = val;
;
	ldx     #$00
	lda     _j
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_map1)
	sta     ptr1
	lda     tmp1
	adc     #>(_map1)
;
; } else if (j >= MAP_SIZE_Y8 && j < MAP_SIZE_Y16) {
;
	jmp     L001D
L0013:	lda     _j
	cmp     #$08
	bcc     L0017
	cmp     #$10
	bcs     L0017
;
; map2[j-MAP_SIZE_Y8][i] = val;
;
	ldx     #$00
	lda     _j
	sec
	sbc     #$08
	bcs     L0008
	dex
L0008:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_map2)
	sta     ptr1
	lda     tmp1
	adc     #>(_map2)
;
; } else if (j >= MAP_SIZE_Y16 && j < MAP_SIZE_Y) {
;
	jmp     L001D
L0017:	lda     _j
	cmp     #$10
	bcc     L0019
	cmp     #$17
	bcc     L001A
L0019:	rts
;
; map3[j-MAP_SIZE_Y16][i] = val;
;
L001A:	ldx     #$00
	lda     _j
	sec
	sbc     #$10
	bcs     L000E
	dex
L000E:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_map3)
	sta     ptr1
	lda     tmp1
	adc     #>(_map3)
L001D:	sta     ptr1+1
	ldy     _i
	lda     _val
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getValFromMap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getValFromMap: near

.segment	"CODE"

;
; if (j < MAP_SIZE_Y8) {
;
	lda     _j
	cmp     #$08
	bcs     L0013
;
; val = map1[j][i];
;
	ldx     #$00
	lda     _j
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_map1)
	sta     ptr1
	lda     tmp1
	adc     #>(_map1)
;
; } else if (j >= MAP_SIZE_Y8 && j < MAP_SIZE_Y16) {
;
	jmp     L001E
L0013:	lda     _j
	cmp     #$08
	bcc     L0017
	cmp     #$10
	bcs     L0017
;
; val = map2[j - MAP_SIZE_Y8][i];
;
	ldx     #$00
	lda     _j
	sec
	sbc     #$08
	bcs     L0008
	dex
L0008:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_map2)
	sta     ptr1
	lda     tmp1
	adc     #>(_map2)
;
; } else if (j >= MAP_SIZE_Y16 && j < MAP_SIZE_Y) {
;
	jmp     L001E
L0017:	lda     _j
	cmp     #$10
	bcc     L0019
	cmp     #$17
	bcc     L001A
L0019:	rts
;
; val = map3[j - MAP_SIZE_Y16][i];
;
L001A:	ldx     #$00
	lda     _j
	sec
	sbc     #$10
	bcs     L000E
	dex
L000E:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_map3)
	sta     ptr1
	lda     tmp1
	adc     #>(_map3)
L001E:	sta     ptr1+1
	ldy     _i
	lda     (ptr1),y
	sta     _val
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ isNotWall (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isNotWall: near

.segment	"CODE"

;
; getValFromMap();
;
	jsr     _getValFromMap
;
; if (val == PACMAN || val == PACGIRL || val == RED
;
	lda     _val
	cmp     _PACMAN
	beq     L0007
	cmp     _PACGIRL
	beq     L0007
;
; || val == CHERRY || val == FOOD
;
	cmp     _RED
	beq     L0007
	cmp     _CHERRY
	beq     L0007
;
; || val == POWER_FOOD || val == EMPTY
;
	cmp     _FOOD
	beq     L0007
	cmp     _POWER_FOOD
	beq     L0007
;
; || val == SHADOW) {
;
	cmp     _EMPTY
	beq     L0007
	cmp     _SHADOW
	beq     L0007
	lda     #$00
	jmp     L0006
;
; val = 1;
;
L0007:	lda     #$01
;
; val = 0;
;
L0006:	sta     _val
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ isNotWallOrDoor (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isNotWallOrDoor: near

.segment	"CODE"

;
; getValFromMap();
;
	jsr     _getValFromMap
;
; if ((val == PACMAN || val == PACGIRL || val == RED
;
	lda     _val
	cmp     _PACMAN
	beq     L000A
	cmp     _PACGIRL
	beq     L000A
;
; || val == CHERRY || val == FOOD
;
	cmp     _RED
	beq     L000A
	cmp     _CHERRY
	beq     L000A
;
; || val == POWER_FOOD || val == EMPTY
;
	cmp     _FOOD
	beq     L000A
	cmp     _POWER_FOOD
	beq     L000A
;
; || val == SHADOW) && val != DOOR) {
;
	cmp     _EMPTY
	beq     L000A
	cmp     _SHADOW
	beq     L000A
	lda     #$00
	jmp     L0009
L000A:	lda     _val
	cmp     _DOOR
	bne     L000D
	lda     #$00
	jmp     L0009
;
; val = 1;
;
L000D:	lda     #$01
;
; val = 0;
;
L0009:	sta     _val
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ openDoors (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_openDoors: near

.segment	"CODE"

;
; i = doorX;
;
	lda     _doorX
	sta     _i
;
; j = doorY;
;
	lda     _doorY
	sta     _j
;
; val = EMPTY;
;
	lda     _EMPTY
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = cherryX;
;
	lda     _cherryX
	sta     _i
;
; j = cherryY;
;
	lda     _cherryY
	sta     _j
;
; val = CHERRY;
;
	lda     _CHERRY
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; cherryFlag = 1;
;
	lda     #$01
	sta     _cherryFlag
;
; refreshCherry = 1;
;
	sta     _refreshCherry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ closeDoors (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_closeDoors: near

.segment	"CODE"

;
; i = doorX;
;
	lda     _doorX
	sta     _i
;
; j = doorY;
;
	lda     _doorY
	sta     _j
;
; val = DOOR;
;
	lda     _DOOR
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; cherryFlag = 0;
;
	lda     #$00
	sta     _cherryFlag
;
; refreshDoor = 1;
;
	lda     #$01
	sta     _refreshDoor
;
; refreshCherry = 0;
;
	lda     #$00
	sta     _refreshCherry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ incFood (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_incFood: near

.segment	"CODE"

;
; sfx_play(0, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; ++food001;
;
	inc     _food001
;
; if (food001 >= 10) {
;
	lda     _food001
	cmp     #$0A
	bcc     L0004
;
; food001 -= 10;
;
	sec
	sbc     #$0A
	sta     _food001
;
; ++food010;
;
	inc     _food010
;
; if (food010 >= 10) {
;
L0004:	lda     _food010
	cmp     #$0A
	bcc     L0003
;
; food010 -= 10;
;
	sec
	sbc     #$0A
	sta     _food010
;
; ++food100;
;
	inc     _food100
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calcScore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calcScore: near

.segment	"CODE"

;
; score100 = food100;
;
	lda     _food100
	sta     _score100
;
; score010 = food010;
;
	lda     _food010
	sta     _score010
;
; score001 = food001;
;
	lda     _food001
	sta     _score001
;
; if (cherryBonus) {
;
	lda     _cherryBonus
	beq     L000F
;
; score100 += 2;   
;
	lda     #$02
	clc
	adc     _score100
	sta     _score100
;
; for (i = 0; i < powerBonus; i++) {
;
	lda     #$00
L000F:	sta     _i
L0010:	lda     _i
	cmp     _powerBonus
	bcs     L0013
;
; score001 += 5;
;
	lda     #$05
	clc
	adc     _score001
	sta     _score001
;
; if (score001 >= 10) {
;
	cmp     #$0A
	bcc     L0011
;
; score001 -= 10;
;
	lda     _score001
	sec
	sbc     #$0A
	sta     _score001
;
; ++score010;
;
	inc     _score010
;
; score010 += 2;
;
L0011:	lda     #$02
	clc
	adc     _score010
	sta     _score010
;
; if (score010 >=10) {
;
	cmp     #$0A
	bcc     L0012
;
; score010 -= 10;
;
	lda     _score010
	sec
	sbc     #$0A
	sta     _score010
;
; ++score100;
;
	inc     _score100
;
; for (i = 0; i < powerBonus; i++) {
;
L0012:	inc     _i
	jmp     L0010
;
; for (i = 0; i < redBonus; i++) {
;
L0013:	lda     #$00
	sta     _i
L0014:	lda     _i
	cmp     _redBonus
	bcs     L000A
;
; score010 += 5;
;
	lda     #$05
	clc
	adc     _score010
	sta     _score010
;
; if (score010 >=10) {
;
	cmp     #$0A
	bcc     L0015
;
; score010 -= 10;
;
	lda     _score010
	sec
	sbc     #$0A
	sta     _score010
;
; ++score100;
;
	inc     _score100
;
; for (i = 0; i < redBonus; i++) {
;
L0015:	inc     _i
	jmp     L0014
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; pacmanLastUpdateTime = PACMAN_SPEED; 
;
	lda     #$09
	sta     _pacmanLastUpdateTime
;
; redLastUpdateTime = 4;     //RED_SPEED;
;
	lda     #$04
	sta     _redLastUpdateTime
;
; pacGirlLastUpdateTime = 6; //PACGIRL_SPEED;
;
	lda     #$06
	sta     _pacGirlLastUpdateTime
;
; cherryTime = CHERRY_TIME
;
	lda     #$FF
	sta     _cherryTime
;
; cherryBonus = 0;
;
	lda     #$00
	sta     _cherryBonus
;
; powerBonus = 0;
;
	sta     _powerBonus
;
; redBonus = 0;
;
	sta     _redBonus
;
; food001 = 1;
;
	lda     #$01
	sta     _food001
;
; food010 = 0;
;
	lda     #$00
	sta     _food010
;
; food100 = 0;
;
	sta     _food100
;
; pacmanX = 15;
;
	tax
	lda     #$0F
	sta     _pacmanX
	stx     _pacmanX+1
;
; pacmanY = 17;
;
	lda     #$11
	sta     _pacmanY
	stx     _pacmanY+1
;
; pacGirlX = 15;
;
	lda     #$0F
	sta     _pacGirlX
	stx     _pacGirlX+1
;
; pacGirlY = 3;
;
	lda     #$03
	sta     _pacGirlY
	stx     _pacGirlY+1
;
; oldX = 15;
;
	lda     #$0F
	sta     _oldX
	stx     _oldX+1
;
; oldY = 17;
;
	lda     #$11
	sta     _oldY
	stx     _oldY+1
;
; pacmanSprite = 1;
;
	lda     #$01
	sta     _pacmanSprite
;
; pacGirlSprite = 1;
;
	sta     _pacGirlSprite
;
; redSprite = 1;
;
	sta     _redSprite
;
; dx = 0;
;
	txa
	sta     _dx
	sta     _dx+1
;
; dy = 0;
;
	sta     _dy
	sta     _dy+1
;
; dxPacGirl = 0;
;
	sta     _dxPacGirl
	sta     _dxPacGirl+1
;
; dyPacGirl = 0;
;
	sta     _dyPacGirl
	sta     _dyPacGirl+1
;
; oldPacGirlX = 15;
;
	lda     #$0F
	sta     _oldPacGirlX
	stx     _oldPacGirlX+1
;
; oldPacGirlY = 3;
;
	lda     #$03
	sta     _oldPacGirlY
	stx     _oldPacGirlY+1
;
; dxRed = 1;
;
	lda     #$01
	sta     _dxRed
	stx     _dxRed+1
;
; dyRed = 0;
;
	txa
	sta     _dyRed
	sta     _dyRed+1
;
; redX = 22;
;
	lda     #$16
	sta     _redX
	stx     _redX+1
;
; redY = 10;
;
	lda     #$0A
	sta     _redY
	stx     _redY+1
;
; oldXRed = 22;
;
	lda     #$16
	sta     _oldXRed
	stx     _oldXRed+1
;
; oldYRed = 10;
;
	lda     #$0A
	sta     _oldYRed
	stx     _oldYRed+1
;
; redFlag = 1;
;
	lda     #$01
	sta     _redFlag
;
; redTime = 0;
;
	txa
	sta     _redTime
;
; cherryFlag = 0;
;
	sta     _cherryFlag
;
; refreshCherry = 0;
;
	sta     _refreshCherry
;
; refreshDoor = 1;
;
	lda     #$01
	sta     _refreshDoor
;
; oldRedVal = '.';
;
	lda     #$2E
	sta     _oldRedVal
;
; oldPacGirlVal = '.';
;
	sta     _oldPacGirlVal
;
; for (i = 0; i < MAP_SIZE_X; i++) {
;
	stx     _i
L0012:	lda     _i
	cmp     #$20
	bcs     L0017
;
; for (j = 0; j < MAP_SIZE_Y; j++) {
;
	lda     #$00
	sta     _j
L0013:	lda     _j
	cmp     #$17
	bcs     L0016
;
; getValFromMap();
;
	jsr     _getValFromMap
;
; if (val == EMPTY || val == PACGIRL || val == PACMAN || val == RED) {
;
	lda     _val
	cmp     _EMPTY
	beq     L0014
	cmp     _PACGIRL
	beq     L0014
	cmp     _PACMAN
	beq     L0014
	cmp     _RED
	bne     L0015
;
; val = FOOD;
;
L0014:	lda     _FOOD
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; for (j = 0; j < MAP_SIZE_Y; j++) {
;
L0015:	inc     _j
	jmp     L0013
;
; for (i = 0; i < MAP_SIZE_X; i++) {
;
L0016:	inc     _i
	jmp     L0012
;
; val = POWER_FOOD;
;
L0017:	lda     _POWER_FOOD
	sta     _val
;
; i = 1;
;
	lda     #$01
	sta     _i
;
; j = 2; 
;
	lda     #$02
	sta     _j
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = 29;
;
	lda     #$1D
	sta     _i
;
; j = 2; 
;
	lda     #$02
	sta     _j
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = 1;
;
	lda     #$01
	sta     _i
;
; j = 17; 
;
	lda     #$11
	sta     _j
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = 29;
;
	lda     #$1D
	sta     _i
;
; j = 17; 
;
	lda     #$11
	sta     _j
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = pacmanX;
;
	lda     _pacmanX
	sta     _i
;
; j = pacmanY;
;
	lda     _pacmanY
	sta     _j
;
; val = PACMAN;
;
	lda     _PACMAN
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = redX;
;
	lda     _redX
	sta     _i
;
; j = redY;
;
	lda     _redY
	sta     _j
;
; val = RED;
;
	lda     _RED
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = pacGirlX;
;
	lda     _pacGirlX
	sta     _i
;
; j = pacGirlY;
;
	lda     _pacGirlY
	sta     _j
;
; val = PACGIRL;
;
	lda     _PACGIRL
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; val = DOOR; 
;
	lda     _DOOR
	sta     _val
;
; i = doorX;
;
	lda     _doorX
	sta     _i
;
; j = doorY;
;
	lda     _doorY
	sta     _j
;
; setValToMap();
;
	jsr     _setValToMap
;
; val = EMPTY;
;
	lda     _EMPTY
	sta     _val
;
; j = doorY + 1;
;
	lda     _doorY
	clc
	adc     #$01
	sta     _j
;
; setValToMap();
;
	jsr     _setValToMap
;
; j = cherryY;
;
	lda     _cherryY
	sta     _j
;
; i = cherryX - 2;
;
	lda     _cherryX
	sec
	sbc     #$02
	sta     _i
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = cherryX - 1;
;
	lda     _cherryX
	sec
	sbc     #$01
	sta     _i
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = cherryX;
;
	lda     _cherryX
	sta     _i
;
; setValToMap();    
;
	jsr     _setValToMap
;
; i = cherryX + 1;
;
	lda     _cherryX
	clc
	adc     #$01
	sta     _i
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = cherryX + 2;
;
	lda     _cherryX
	clc
	adc     #$02
	sta     _i
;
; setValToMap();    
;
	jmp     _setValToMap

.endproc

; ---------------------------------------------------------------
; int __near__ pacmanLooser (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pacmanLooser: near

.segment	"CODE"

;
; if (redY == pacmanY && redX == pacmanX) {
;
	lda     _pacmanY
	ldx     _pacmanY+1
	cpx     _redY+1
	jne     L0002
	cmp     _redY
	jne     L0002
	lda     _pacmanX
	ldx     _pacmanX+1
	cpx     _redX+1
	jne     L0002
	cmp     _redX
	jne     L0002
;
; if (redFlag) {
;
	lda     _redFlag
	beq     L001C
;
; i = pacmanX;
;
	lda     _pacmanX
	sta     _i
;
; j = pacmanY;
;
	lda     _pacmanY
	sta     _j
;
; val = RED;
;
	lda     _RED
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; calcScore();
;
	jsr     _calcScore
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; sfx_play(2, 0);
;
L001C:	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; redY = 10;
;
	ldx     #$00
	lda     #$0A
	sta     _redY
	stx     _redY+1
;
; redX = 15;
;
	lda     #$0F
	sta     _redX
	stx     _redX+1
;
; dyRed = 0;
;
	txa
	sta     _dyRed
	sta     _dyRed+1
;
; dxRed = 0;
;
	sta     _dxRed
	sta     _dxRed+1
;
; closeDoors();
;
	jsr     _closeDoors
;
; i = redX;
;
	lda     _redX
	sta     _i
;
; j = redY;
;
	lda     _redY
	sta     _j
;
; val = RED;
;
	lda     _RED
	sta     _val
;
; redFlag = 1;
;
	lda     #$01
	sta     _redFlag
;
; setValToMap();
;
	jsr     _setValToMap
;
; redTime = RED_TIME;
;
	lda     #$FF
	sta     _redTime
;
; ++redBonus;
;
	inc     _redBonus
;
; if (oldRedVal == FOOD) {
;
	lda     _oldRedVal
	cmp     _FOOD
	bne     L001D
;
; incFood();
;
	jsr     _incFood
;
; } else if (oldRedVal == POWER_FOOD) {
;
	jmp     L0025
L001D:	lda     _oldRedVal
	cmp     _POWER_FOOD
	bne     L001E
;
; ++powerBonus;
;
	inc     _powerBonus
;
; sfx_play(5, 0);
;
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; redTime = RED_TIME;
;
	lda     #$FF
	sta     _redTime
;
; } else if (oldRedVal == CHERRY) {
;
	jmp     L0025
L001E:	lda     _oldRedVal
	cmp     _CHERRY
	jne     L0025
;
; ++cherryBonus;
;
	inc     _cherryBonus
;
; sfx_play(3, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; } else if (redY == pacGirlY && redX == pacGirlX) {
;
	jmp     L0025
L0002:	lda     _pacGirlY
	ldx     _pacGirlY+1
	cpx     _redY+1
	bne     L0027
	cmp     _redY
	bne     L0027
	lda     _pacGirlX
	ldx     _pacGirlX+1
	cpx     _redX+1
	bne     L0027
	cmp     _redX
	bne     L0027
;
; if (oldRedVal == FOOD) {
;
	lda     _oldRedVal
	cmp     _FOOD
	bne     L0020
;
; incFood();
;
	jsr     _incFood
;
; } else if (oldRedVal == POWER_FOOD) {
;
	jmp     L0022
L0020:	lda     _oldRedVal
	cmp     _POWER_FOOD
	bne     L0021
;
; ++powerBonus;
;
	inc     _powerBonus
;
; sfx_play(5, 0);
;
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; redTime = RED_TIME;
;
	lda     #$FF
	sta     _redTime
;
; redFlag = 0;
;
	lda     #$00
	sta     _redFlag
;
; } else if (oldRedVal == CHERRY) {
;
	jmp     L0022
L0021:	lda     _oldRedVal
	cmp     _CHERRY
	bne     L0022
;
; ++cherryBonus;
;
	inc     _cherryBonus
;
; sfx_play(3, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; i = pacGirlX;
;
L0022:	lda     _pacGirlX
	sta     _i
;
; j = pacGirlY;
;
	lda     _pacGirlY
	sta     _j
;
; val = RED;
;
	lda     _RED
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; oldRedVal = EMPTY;
;
L0025:	lda     _EMPTY
	sta     _oldRedVal
;
; return 0;
;
L0027:	ldx     #$00
	txa
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ pacManState (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pacManState: near

.segment	"CODE"

;
; if (dx != 0 || dy != 0) {
;
	lda     _dx
	ora     _dx+1
	bne     L0004
	lda     _dy
	ora     _dy+1
	jeq     L0026
;
; if (pacmanLastUpdateTime == 0) {
;
L0004:	ldx     #$00
	lda     _pacmanLastUpdateTime
	jne     L0025
;
; pacmanX = pacmanX + dx;
;
	lda     _pacmanX
	clc
	adc     _dx
	sta     _pacmanX
	lda     _pacmanX+1
	adc     _dx+1
	sta     _pacmanX+1
;
; pacmanY = pacmanY + dy;
;
	lda     _pacmanY
	clc
	adc     _dy
	sta     _pacmanY
	lda     _pacmanY+1
	adc     _dy+1
	sta     _pacmanY+1
;
; pacmanLastUpdateTime = PACMAN_SPEED;
;
	lda     #$09
	sta     _pacmanLastUpdateTime
;
; if (pacmanX < 0) {
;
	ldx     _pacmanX+1
	cpx     #$80
	bcc     L0008
;
; pacmanX = MAP_SIZE_X - 2;
;
	ldx     #$00
	lda     #$1E
;
; } else if (pacmanX > MAP_SIZE_X - 2) {
;
	jmp     L0027
L0008:	lda     _pacmanX
	cmp     #$1F
	lda     _pacmanX+1
	sbc     #$00
	bvs     L000B
	eor     #$80
L000B:	bpl     L000A
;
; pacmanX = 0;
;
	ldx     #$00
	txa
L0027:	sta     _pacmanX
	stx     _pacmanX+1
;
; if (pacmanY < 0) {
;
L000A:	ldx     _pacmanY+1
	cpx     #$80
	bcc     L000C
;
; pacmanY = MAP_SIZE_Y - 1;
;
	ldx     #$00
	lda     #$16
;
; } else if (pacmanY > MAP_SIZE_Y - 1) {
;
	jmp     L0028
L000C:	lda     _pacmanY
	cmp     #$17
	lda     _pacmanY+1
	sbc     #$00
	bvs     L000F
	eor     #$80
L000F:	bpl     L001F
;
; pacmanY = 0;
;
	ldx     #$00
	txa
L0028:	sta     _pacmanY
	stx     _pacmanY+1
;
; i = pacmanX;
;
L001F:	lda     _pacmanX
	sta     _i
;
; j = pacmanY;
;
	lda     _pacmanY
	sta     _j
;
; getValFromMap();
;
	jsr     _getValFromMap
;
; if (val == FOOD) {
;
	lda     _val
	cmp     _FOOD
	bne     L0020
;
; incFood();
;
	jsr     _incFood
;
; } else if (val == POWER_FOOD) {
;
	jmp     L0022
L0020:	lda     _val
	cmp     _POWER_FOOD
	bne     L0021
;
; redFlag = 0;
;
	lda     #$00
	sta     _redFlag
;
; dxRed = -dxRed;
;
	lda     _dxRed
	ldx     _dxRed+1
	jsr     negax
	sta     _dxRed
	stx     _dxRed+1
;
; dyRed = -dyRed;
;
	lda     _dyRed
	ldx     _dyRed+1
	jsr     negax
	sta     _dyRed
	stx     _dyRed+1
;
; redTime = RED_TIME;
;
	lda     #$FF
	sta     _redTime
;
; ++powerBonus;
;
	inc     _powerBonus
;
; sfx_play(5, 0);
;
	lda     #$05
;
; } else if (val == CHERRY) {
;
	jmp     L002A
L0021:	lda     _val
	cmp     _CHERRY
	bne     L0022
;
; ++cherryBonus;
;
	inc     _cherryBonus
;
; sfx_play(3, 0);
;
	lda     #$03
L002A:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; i = pacmanX;
;
L0022:	lda     _pacmanX
	sta     _i
;
; j = pacmanY;
;
	lda     _pacmanY
	sta     _j
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; if (val) {
;
	lda     _val
	beq     L0015
;
; i = oldX;
;
	lda     _oldX
	sta     _i
;
; j = oldY;
;
	lda     _oldY
	sta     _j
;
; val = EMPTY;
;
	lda     _EMPTY
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; drawBlackBox();
;
	jsr     _drawBlackBox
;
; } else {
;
	jmp     L0016
;
; pacmanY = oldY;
;
L0015:	lda     _oldY+1
	sta     _pacmanY+1
	lda     _oldY
	sta     _pacmanY
;
; pacmanX = oldX;
;
	lda     _oldX+1
	sta     _pacmanX+1
	lda     _oldX
	sta     _pacmanX
;
; dx = 0;
;
	lda     #$00
	sta     _dx
	sta     _dx+1
;
; dy = 0;
;
	sta     _dy
	sta     _dy+1
;
; i = pacmanX;
;
L0016:	lda     _pacmanX
	sta     _i
;
; j = pacmanY;
;
	lda     _pacmanY
	sta     _j
;
; val = PACMAN;
;
	lda     _PACMAN
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; if (food100 == 2 && food010 == 7 && food001 == 1 && powerBonus == 4) {
;
	lda     _food100
	cmp     #$02
	bne     L0017
	lda     _food010
	cmp     #$07
	bne     L0017
	lda     _food001
	cmp     #$01
	bne     L0017
	lda     _powerBonus
	cmp     #$04
	bne     L0017
;
; music_play(1);
;
	lda     #$01
	jsr     _music_play
;
; calcScore();
;
	jsr     _calcScore
;
; return 0;
;
	ldx     #$00
	txa
	rts
;
; if (pacmanLooser()) {
;
L0017:	jsr     _pacmanLooser
	stx     tmp1
	ora     tmp1
	beq     L001B
;
; music_play(2);
;
	lda     #$02
	jsr     _music_play
;
; return 0;
;
	ldx     #$00
	txa
	rts
;
; oldX = pacmanX;
;
L001B:	lda     _pacmanX+1
	sta     _oldX+1
	lda     _pacmanX
	sta     _oldX
;
; oldY = pacmanY;
;
	lda     _pacmanY+1
	sta     _oldY+1
	lda     _pacmanY
	sta     _oldY
;
; return 1;
;
L0026:	ldx     #$00
L0025:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ redState (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_redState: near

.segment	"CODE"

;
; if (redTime == 0) {
;
	lda     _redTime
	bne     L00C3
;
; redFlag = 1;
;
	lda     #$01
	sta     _redFlag
;
; if (dyRed == 0 && dxRed == 0) {
;
	lda     _dyRed
	ora     _dyRed+1
	bne     L000A
	lda     _dxRed
	ora     _dxRed+1
	bne     L000A
;
; dyRed = -1;
;
	lda     #$FF
	sta     _dyRed
	sta     _dyRed+1
;
; } else if (redLastUpdateTime == 0 && dyRed == 0 && dxRed == 0){
;
	jmp     L000A
L00C3:	lda     _redLastUpdateTime
	bne     L000A
	lda     _dyRed
	ora     _dyRed+1
	bne     L000A
	lda     _dxRed
	ora     _dxRed+1
	bne     L000A
;
; redLastUpdateTime = RED_SPEED;
;
	lda     #$09
	sta     _redLastUpdateTime
;
; if (dxRed != 0 || dyRed != 0) {
;
L000A:	lda     _dxRed
	ora     _dxRed+1
	bne     L0012
	lda     _dyRed
	ora     _dyRed+1
	jeq     L00D3
;
; if (redLastUpdateTime == 0) {
;
L0012:	lda     _redLastUpdateTime
	jne     L00D3
;
; redX = redX + dxRed;
;
	lda     _redX
	clc
	adc     _dxRed
	sta     _redX
	lda     _redX+1
	adc     _dxRed+1
	sta     _redX+1
;
; redY = redY + dyRed;
;
	lda     _redY
	clc
	adc     _dyRed
	sta     _redY
	lda     _redY+1
	adc     _dyRed+1
	sta     _redY+1
;
; redLastUpdateTime = RED_SPEED;
;
	lda     #$09
	sta     _redLastUpdateTime
;
; if (redX < 0) {
;
	ldx     _redX+1
	cpx     #$80
	bcc     L0016
;
; redX = MAP_SIZE_X - 2;
;
	ldx     #$00
	lda     #$1E
;
; } else if (redX > MAP_SIZE_X - 2) {
;
	jmp     L00D5
L0016:	lda     _redX
	cmp     #$1F
	lda     _redX+1
	sbc     #$00
	bvs     L0019
	eor     #$80
L0019:	bpl     L0018
;
; redX = 0;
;
	ldx     #$00
	txa
L00D5:	sta     _redX
	stx     _redX+1
;
; if (redY < 0) {
;
L0018:	ldx     _redY+1
	cpx     #$80
	bcc     L001A
;
; redY = MAP_SIZE_Y - 1;
;
	ldx     #$00
	lda     #$16
;
; } else if (redY > MAP_SIZE_Y - 1) {
;
	jmp     L00D6
L001A:	lda     _redY
	cmp     #$17
	lda     _redY+1
	sbc     #$00
	bvs     L001D
	eor     #$80
L001D:	bpl     L00C6
;
; redY = 0;
;
	ldx     #$00
	txa
L00D6:	sta     _redY
	stx     _redY+1
;
; i = redX;
;
L00C6:	lda     _redX
	sta     _i
;
; j = redY;
;
	lda     _redY
	sta     _j
;
; isNotWall();
;
	jsr     _isNotWall
;
; if (val) {
;
	lda     _val
	jeq     L001E
;
; i = oldXRed;
;
	lda     _oldXRed
	sta     _i
;
; j = oldYRed;
;
	lda     _oldYRed
	sta     _j
;
; val = oldRedVal;
;
	lda     _oldRedVal
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; i = redX;
;
	lda     _redX
	sta     _i
;
; j = redY;
;
	lda     _redY
	sta     _j
;
; getValFromMap();
;
	jsr     _getValFromMap
;
; oldRedVal = val;
;
	lda     _val
	sta     _oldRedVal
;
; if (redX == 15 && redY >= 7 && redY <= 10) {
;
	lda     _redX+1
	bne     L001F
	lda     _redX
	cmp     #$0F
	bne     L001F
	lda     _redY
	cmp     #$07
	lda     _redY+1
	sbc     #$00
	bvs     L0022
	eor     #$80
L0022:	bpl     L001F
	lda     _redY
	cmp     #$0B
	lda     _redY+1
	sbc     #$00
	bvc     L0023
	eor     #$80
L0023:	bpl     L001F
;
; dyRed = -1;
;
	lda     #$FF
	sta     _dyRed
	sta     _dyRed+1
;
; dxRed = 0;
;
	ldx     #$00
;
; } else if (dxRed != 0) {
;
	jmp     L00E1
L001F:	lda     _dxRed
	ora     _dxRed+1
	jeq     L0027
;
; i = redX;
;
	lda     _redX
	sta     _i
;
; j = redY + 1;
;
	lda     _redY
	clc
	adc     #$01
	sta     _j
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; val2 = val;
;
	lda     _val
	sta     _val2
;
; j = redY - 1;
;
	lda     _redY
	sec
	sbc     #$01
	sta     _j
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; if (redFlag && redY != pacmanY) {
;
	lda     _redFlag
	jeq     L002B
	lda     _pacmanY
	ldx     _pacmanY+1
	cpx     _redY+1
	bne     L002D
	cmp     _redY
	jeq     L002B
;
; if (val && val2) {
;
L002D:	lda     _val
	jeq     L002F
	lda     _val2
	jeq     L002F
;
; if (redY + 1 - pacmanY < 0) { 
;
	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L0034
	inx
L0034:	sec
	sbc     _pacmanY
	txa
	sbc     _pacmanY+1
	tax
	cpx     #$80
	bcc     L0033
;
; val = pacmanY - (redY + 1);
;
	lda     _pacmanY
	ldx     _pacmanY+1
	jsr     pushax
	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L0035
	inx
L0035:	jsr     tossubax
;
; } else { 
;
	jmp     L00AA
;
; val = redY + 1 - pacmanY;
;
L0033:	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L0037
	inx
L0037:	sec
	sbc     _pacmanY
	pha
	txa
	sbc     _pacmanY+1
	pla
L00AA:	sta     _val
;
; if (redY - 1 - pacmanY < 0) {
;
	lda     _redY
	ldx     _redY+1
	sec
	sbc     #$01
	bcs     L00BB
	dex
	sec
L00BB:	sbc     _pacmanY
	txa
	sbc     _pacmanY+1
	tax
	cpx     #$80
	bcc     L0038
;
; val2 = pacmanY - (redY - 1);
;
	lda     _pacmanY
	ldx     _pacmanY+1
	jsr     pushax
	lda     _redY
	ldx     _redY+1
	sec
	sbc     #$01
	bcs     L003A
	dex
L003A:	jsr     tossubax
;
; } else {
;
	jmp     L00AB
;
; val2 = redY - 1 - pacmanY;
;
L0038:	lda     _redY
	ldx     _redY+1
	sec
	sbc     #$01
	bcs     L00BC
	dex
	sec
L00BC:	sbc     _pacmanY
	pha
	txa
	sbc     _pacmanY+1
	pla
L00AB:	sta     _val2
;
; if (val < val2) {
;
	lda     _val
	cmp     _val2
	bcs     L003D
;
; dyRed = 1;
;
	ldx     #$00
	lda     #$01
;
; } else {
;
	jmp     L00A3
;
; dyRed = -1;
;
L003D:	ldx     #$FF
	txa
;
; } else if (val2) {
;
	jmp     L00A3
L002F:	lda     _val2
	jeq     L0040
;
; if (redY + 1 - pacmanY < 0) { 
;
	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L0042
	inx
L0042:	sec
	sbc     _pacmanY
	txa
	sbc     _pacmanY+1
	tax
	cpx     #$80
	bcc     L0041
;
; val = pacmanY - (redY + 1);
;
	lda     _pacmanY
	ldx     _pacmanY+1
	jsr     pushax
	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L0043
	inx
L0043:	jsr     tossubax
;
; } else { 
;
	jmp     L00AE
;
; val = redY + 1 - pacmanY;
;
L0041:	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L0045
	inx
L0045:	sec
	sbc     _pacmanY
	pha
	txa
	sbc     _pacmanY+1
	pla
L00AE:	sta     _val
;
; if (redY - pacmanY < 0) {
;
	lda     _redY
	sec
	sbc     _pacmanY
	lda     _redY+1
	sbc     _pacmanY+1
	tax
	cpx     #$80
	bcc     L0046
;
; val2 = pacmanY - redY;
;
	lda     _pacmanY
	sec
	sbc     _redY
	pha
	lda     _pacmanY+1
	sbc     _redY+1
;
; } else {
;
	jmp     L00D9
;
; val2 = redY - pacmanY;
;
L0046:	lda     _redY
	sec
	sbc     _pacmanY
	pha
	lda     _redY+1
	sbc     _pacmanY+1
L00D9:	pla
	sta     _val2
;
; if (val < val2) {
;
	lda     _val
	cmp     _val2
	jcs     L0055
;
; dyRed = 1;
;
	ldx     #$00
	lda     #$01
;
; } else if (val) {
;
	jmp     L00A3
L0040:	lda     _val
	jeq     L0055
;
; if (redY + 1 - pacmanY < 0) { 
;
	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L004C
	inx
L004C:	sec
	sbc     _pacmanY
	txa
	sbc     _pacmanY+1
	tax
	cpx     #$80
	bcc     L004B
;
; val = pacmanY - (redY + 1);
;
	lda     _pacmanY
	ldx     _pacmanY+1
	jsr     pushax
	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L004D
	inx
L004D:	jsr     tossubax
;
; } else { 
;
	jmp     L00B0
;
; val = redY + 1 - pacmanY;
;
L004B:	lda     _redY
	ldx     _redY+1
	clc
	adc     #$01
	bcc     L004F
	inx
L004F:	sec
	sbc     _pacmanY
	pha
	txa
	sbc     _pacmanY+1
	pla
L00B0:	sta     _val
;
; if (redY - pacmanY < 0) {
;
	lda     _redY
	sec
	sbc     _pacmanY
	lda     _redY+1
	sbc     _pacmanY+1
	tax
	cpx     #$80
	bcc     L0050
;
; val2 = pacmanY - redY;
;
	lda     _pacmanY
	sec
	sbc     _redY
	pha
	lda     _pacmanY+1
	sbc     _redY+1
;
; } else {
;
	jmp     L00DA
;
; val2 = redY - pacmanY;
;
L0050:	lda     _redY
	sec
	sbc     _pacmanY
	pha
	lda     _redY+1
	sbc     _pacmanY+1
L00DA:	pla
	sta     _val2
;
; if (val < val2) {
;
	lda     _val
	cmp     _val2
	bcs     L0055
;
; dyRed = -1;
;
	ldx     #$FF
	txa
;
; } else {
;
	jmp     L00A3
;
; if (val2) {       
;
L002B:	lda     _val2
	beq     L0054
;
; dyRed = rand8() % 2;
;
	jsr     _rand8
	ldx     #$00
	and     #$01
	sta     _dyRed
	stx     _dyRed+1
;
; if (val) {
;
L0054:	lda     _val
	beq     L0055
;
; dyRed = -1 * (rand8() % 2);     
;
	jsr     _rand8
	and     #$01
	ldx     #$FF
	eor     #$FF
	clc
	adc     #$01
	bcc     L00A3
	inx
L00A3:	sta     _dyRed
	stx     _dyRed+1
;
; if (dyRed != 0) {
;
L0055:	lda     _dyRed
	ora     _dyRed+1
	jeq     L009F
;
; dxRed = 0;
;
	ldx     #$00
;
; } else if (dyRed != 0) {
;
	jmp     L00E1
L0027:	lda     _dyRed
	ora     _dyRed+1
	jeq     L009F
;
; i = redX + 1;
;
	lda     _redX
	clc
	adc     #$01
	sta     _i
;
; j = redY;
;
	lda     _redY
	sta     _j
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; val2 = val;
;
	lda     _val
	sta     _val2
;
; i = redX - 1;
;
	lda     _redX
	sec
	sbc     #$01
	sta     _i
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; if (redFlag && redX != pacmanX) {
;
	lda     _redFlag
	jeq     L005D
	lda     _pacmanX
	ldx     _pacmanX+1
	cpx     _redX+1
	bne     L005F
	cmp     _redX
	jeq     L005D
;
; if (val2 && val) { 
;
L005F:	lda     _val2
	jeq     L0061
	lda     _val
	jeq     L0061
;
; if (redX + 1 - pacmanX < 0) {
;
	lda     _redX
	ldx     _redX+1
	clc
	adc     #$01
	bcc     L0066
	inx
L0066:	sec
	sbc     _pacmanX
	txa
	sbc     _pacmanX+1
	tax
	cpx     #$80
	bcc     L0065
;
; val = pacmanX - (redX + 1);
;
	lda     _pacmanX
	ldx     _pacmanX+1
	jsr     pushax
	lda     _redX
	ldx     _redX+1
	clc
	adc     #$01
	bcc     L0067
	inx
L0067:	jsr     tossubax
;
; } else {
;
	jmp     L00B2
;
; val = redX + 1 - pacmanX;
;
L0065:	lda     _redX
	ldx     _redX+1
	clc
	adc     #$01
	bcc     L0069
	inx
L0069:	sec
	sbc     _pacmanX
	pha
	txa
	sbc     _pacmanX+1
	pla
L00B2:	sta     _val
;
; if (redX - 1 - pacmanX < 0) {
;
	lda     _redX
	ldx     _redX+1
	sec
	sbc     #$01
	bcs     L00BD
	dex
	sec
L00BD:	sbc     _pacmanX
	txa
	sbc     _pacmanX+1
	tax
	cpx     #$80
	bcc     L006A
;
; val2 = pacmanX - (redX - 1);
;
	lda     _pacmanX
	ldx     _pacmanX+1
	jsr     pushax
	lda     _redX
	ldx     _redX+1
	sec
	sbc     #$01
	bcs     L006C
	dex
L006C:	jsr     tossubax
;
; } else {
;
	jmp     L00B3
;
; val2 = redX - 1 - pacmanX;
;
L006A:	lda     _redX
	ldx     _redX+1
	sec
	sbc     #$01
	bcs     L00BE
	dex
	sec
L00BE:	sbc     _pacmanX
	pha
	txa
	sbc     _pacmanX+1
	pla
L00B3:	sta     _val2
;
; if (val < val2) {
;
	lda     _val
	cmp     _val2
	bcs     L006F
;
; dxRed = 1;
;
	ldx     #$00
	lda     #$01
;
; } else {
;
	jmp     L00A4
;
; dxRed = -1;
;
L006F:	ldx     #$FF
	txa
;
; } else if (val2) {
;
	jmp     L00A4
L0061:	lda     _val2
	jeq     L0072
;
; if (redX + 1 - pacmanX < 0) {
;
	lda     _redX
	ldx     _redX+1
	clc
	adc     #$01
	bcc     L0074
	inx
L0074:	sec
	sbc     _pacmanX
	txa
	sbc     _pacmanX+1
	tax
	cpx     #$80
	bcc     L0073
;
; val = pacmanX - (redX + 1);
;
	lda     _pacmanX
	ldx     _pacmanX+1
	jsr     pushax
	lda     _redX
	ldx     _redX+1
	clc
	adc     #$01
	bcc     L0075
	inx
L0075:	jsr     tossubax
;
; } else {
;
	jmp     L00B6
;
; val = redX + 1 - pacmanX;
;
L0073:	lda     _redX
	ldx     _redX+1
	clc
	adc     #$01
	bcc     L0077
	inx
L0077:	sec
	sbc     _pacmanX
	pha
	txa
	sbc     _pacmanX+1
	pla
L00B6:	sta     _val
;
; if (redX - pacmanX < 0) {
;
	lda     _redX
	sec
	sbc     _pacmanX
	lda     _redX+1
	sbc     _pacmanX+1
	tax
	cpx     #$80
	bcc     L0078
;
; val2 = pacmanX - redX;
;
	lda     _pacmanX
	sec
	sbc     _redX
	pha
	lda     _pacmanX+1
	sbc     _redX+1
;
; } else {
;
	jmp     L00DD
;
; val2 = redX - pacmanX;
;
L0078:	lda     _redX
	sec
	sbc     _pacmanX
	pha
	lda     _redX+1
	sbc     _pacmanX+1
L00DD:	pla
	sta     _val2
;
; if (val < val2) {
;
	lda     _val
	cmp     _val2
	jcs     L0087
;
; dxRed = 1;
;
	ldx     #$00
	lda     #$01
;
; } else if (val) {
;
	jmp     L00A4
L0072:	lda     _val
	jeq     L0087
;
; if (redX - 1 - pacmanX < 0) {
;
	lda     _redX
	ldx     _redX+1
	sec
	sbc     #$01
	bcs     L00BF
	dex
	sec
L00BF:	sbc     _pacmanX
	txa
	sbc     _pacmanX+1
	tax
	cpx     #$80
	bcc     L007D
;
; val = pacmanX - (redX - 1);
;
	lda     _pacmanX
	ldx     _pacmanX+1
	jsr     pushax
	lda     _redX
	ldx     _redX+1
	sec
	sbc     #$01
	bcs     L007F
	dex
L007F:	jsr     tossubax
;
; } else {
;
	jmp     L00B8
;
; val = redX - 1 - pacmanX;
;
L007D:	lda     _redX
	ldx     _redX+1
	sec
	sbc     #$01
	bcs     L00C0
	dex
	sec
L00C0:	sbc     _pacmanX
	pha
	txa
	sbc     _pacmanX+1
	pla
L00B8:	sta     _val
;
; if (redX - pacmanX < 0) {
;
	lda     _redX
	sec
	sbc     _pacmanX
	lda     _redX+1
	sbc     _pacmanX+1
	tax
	cpx     #$80
	bcc     L0082
;
; val2 = pacmanX - redX;
;
	lda     _pacmanX
	sec
	sbc     _redX
	pha
	lda     _pacmanX+1
	sbc     _redX+1
;
; } else {
;
	jmp     L00DE
;
; val2 = redX - pacmanX;
;
L0082:	lda     _redX
	sec
	sbc     _pacmanX
	pha
	lda     _redX+1
	sbc     _pacmanX+1
L00DE:	pla
	sta     _val2
;
; if (val < val2) {
;
	lda     _val
	cmp     _val2
	bcs     L0087
;
; dxRed = -1;
;
	ldx     #$FF
	txa
;
; } else {
;
	jmp     L00A4
;
; if (val2) {
;
L005D:	lda     _val2
	beq     L0086
;
; dxRed = rand8() % 2;       
;
	jsr     _rand8
	ldx     #$00
	and     #$01
	sta     _dxRed
	stx     _dxRed+1
;
; if (val) {
;
L0086:	lda     _val
	beq     L0087
;
; dxRed = -1 * (rand8() % 2);       
;
	jsr     _rand8
	and     #$01
	ldx     #$FF
	eor     #$FF
	clc
	adc     #$01
	bcc     L00A4
	inx
L00A4:	sta     _dxRed
	stx     _dxRed+1
;
; if (dxRed != 0) {
;
L0087:	lda     _dxRed
	ora     _dxRed+1
	jeq     L009F
;
; dyRed = 0;
;
	lda     #$00
	sta     _dyRed
	sta     _dyRed+1
;
; } else {
;
	jmp     L009F
;
; if (redX == 15 && redY >= 7 && redY <= 10) {
;
L001E:	lda     _redX+1
	bne     L008B
	lda     _redX
	cmp     #$0F
	bne     L008B
	lda     _redY
	cmp     #$07
	lda     _redY+1
	sbc     #$00
	bvs     L008E
	eor     #$80
L008E:	bpl     L008B
	lda     _redY
	cmp     #$0B
	lda     _redY+1
	sbc     #$00
	bvc     L008F
	eor     #$80
L008F:	bpl     L008B
;
; dyRed = -1;
;
	lda     #$FF
	sta     _dyRed
	sta     _dyRed+1
;
; dxRed = 0;
;
	ldx     #$00
;
; } else {
;
	jmp     L00E1
;
; redX = oldXRed;
;
L008B:	lda     _oldXRed+1
	sta     _redX+1
	lda     _oldXRed
	sta     _redX
;
; redY = oldYRed;
;
	lda     _oldYRed+1
	sta     _redY+1
	lda     _oldYRed
	sta     _redY
;
; if (dxRed != 0) {
;
	lda     _dxRed
	ora     _dxRed+1
	beq     L0093
;
; i = redX;
;
	lda     _redX
	sta     _i
;
; j = redY + 1;
;
	lda     _redY
	clc
	adc     #$01
	sta     _j
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; val2 = val;
;
	lda     _val
	sta     _val2
;
; j = redY - 1;
;
	lda     _redY
	sec
	sbc     #$01
	sta     _j
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; dxRed = 0;
;
	ldx     #$00
	txa
	sta     _dxRed
	sta     _dxRed+1
;
; if (val2) {
;
	lda     _val2
	beq     L0097
;
; dyRed = 1;
;
	lda     #$01
	sta     _dyRed
	stx     _dyRed+1
;
; } else if (val) {
;
	jmp     L009F
L0097:	lda     _val
	beq     L009F
;
; dyRed = -1;
;
	lda     #$FF
	sta     _dyRed
	sta     _dyRed+1
;
; } else {
;
	jmp     L009F
;
; i = redX + 1;
;
L0093:	lda     _redX
	clc
	adc     #$01
	sta     _i
;
; j = redY;
;
	lda     _redY
	sta     _j
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; val2 = val;
;
	lda     _val
	sta     _val2
;
; i = redX - 1;
;
	lda     _redX
	sec
	sbc     #$01
	sta     _i
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; dyRed = 0;
;
	ldx     #$00
	txa
	sta     _dyRed
	sta     _dyRed+1
;
; if (val2) {
;
	lda     _val2
	beq     L009D
;
; dxRed = 1;
;
	lda     #$01
;
; } else if (val) {
;
	jmp     L00D7
L009D:	lda     _val
	beq     L009F
;
; dxRed = -1;
;
	dex
L00E1:	txa
L00D7:	sta     _dxRed
	stx     _dxRed+1
;
; if (pacmanLooser()) {
;
L009F:	jsr     _pacmanLooser
	stx     tmp1
	ora     tmp1
	beq     L00A0
;
; music_play(2);
;
	lda     #$02
	jsr     _music_play
;
; return 0;
;
	ldx     #$00
	txa
	rts
;
; oldXRed = redX;
;
L00A0:	lda     _redX+1
	sta     _oldXRed+1
	lda     _redX
	sta     _oldXRed
;
; oldYRed = redY;
;
	lda     _redY+1
	sta     _oldYRed+1
	lda     _redY
	sta     _oldYRed
;
; i = redX;
;
L00D3:	lda     _redX
	sta     _i
;
; j = redY;
;
	lda     _redY
	sta     _j
;
; if (redFlag) {
;
	lda     _redFlag
	beq     L00D4
;
; val = RED;
;
	lda     _RED
;
; } else {
;
	jmp     L00E0
;
; val = SHADOW;
;
L00D4:	lda     _SHADOW
L00E0:	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; return 1;
;
	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ pacGirlState (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pacGirlState: near

.segment	"CODE"

;
; if (dxPacGirl != 0 || dyPacGirl != 0) {
;
	lda     _dxPacGirl
	ora     _dxPacGirl+1
	bne     L0004
	lda     _dyPacGirl
	ora     _dyPacGirl+1
	jeq     L0029
;
; if (players == 1) {
;
L0004:	ldx     #$00
	lda     _players
	cmp     #$01
	bne     L0021
;
; players = 2;
;
	lda     #$02
	sta     _players
;
; i = pacGirlX;
;
	lda     _pacGirlX
	sta     _i
;
; j = pacGirlY;
;
	lda     _pacGirlY
	sta     _j
;
; getValFromMap();
;
	jsr     _getValFromMap
;
; if (val == FOOD) {
;
	ldx     #$00
	lda     _val
	cmp     _FOOD
	bne     L0021
;
; incFood();
;
	jsr     _incFood
;
; if (pacGirlLastUpdateTime == 0) {
;
	ldx     #$00
L0021:	lda     _pacGirlLastUpdateTime
	jne     L0028
;
; pacGirlX = pacGirlX + dxPacGirl;
;
	lda     _pacGirlX
	clc
	adc     _dxPacGirl
	sta     _pacGirlX
	lda     _pacGirlX+1
	adc     _dxPacGirl+1
	sta     _pacGirlX+1
;
; pacGirlY = pacGirlY + dyPacGirl;
;
	lda     _pacGirlY
	clc
	adc     _dyPacGirl
	sta     _pacGirlY
	lda     _pacGirlY+1
	adc     _dyPacGirl+1
	sta     _pacGirlY+1
;
; pacGirlLastUpdateTime = PACGIRL_SPEED;
;
	lda     #$09
	sta     _pacGirlLastUpdateTime
;
; if (pacGirlX < 0) {
;
	ldx     _pacGirlX+1
	cpx     #$80
	bcc     L000A
;
; pacGirlX = MAP_SIZE_X - 2;
;
	ldx     #$00
	lda     #$1E
;
; } else if (pacGirlX > MAP_SIZE_X - 2) {
;
	jmp     L002A
L000A:	lda     _pacGirlX
	cmp     #$1F
	lda     _pacGirlX+1
	sbc     #$00
	bvs     L000D
	eor     #$80
L000D:	bpl     L000C
;
; pacGirlX = 0;
;
	ldx     #$00
	txa
L002A:	sta     _pacGirlX
	stx     _pacGirlX+1
;
; if (pacGirlY < 0) {
;
L000C:	ldx     _pacGirlY+1
	cpx     #$80
	bcc     L000E
;
; pacGirlY = MAP_SIZE_Y - 1;
;
	ldx     #$00
	lda     #$16
;
; } else if (pacGirlY > MAP_SIZE_Y - 1) {
;
	jmp     L002B
L000E:	lda     _pacGirlY
	cmp     #$17
	lda     _pacGirlY+1
	sbc     #$00
	bvs     L0011
	eor     #$80
L0011:	bpl     L0022
;
; pacGirlY = 0;
;
	ldx     #$00
	txa
L002B:	sta     _pacGirlY
	stx     _pacGirlY+1
;
; i = pacGirlX;
;
L0022:	lda     _pacGirlX
	sta     _i
;
; j = pacGirlY;
;
	lda     _pacGirlY
	sta     _j
;
; getValFromMap();
;
	jsr     _getValFromMap
;
; if (val == FOOD) {
;
	lda     _val
	cmp     _FOOD
	bne     L0023
;
; incFood();
;
	jsr     _incFood
;
; } else if (val == POWER_FOOD) {
;
	jmp     L0025
L0023:	lda     _val
	cmp     _POWER_FOOD
	bne     L0024
;
; redFlag = 0;
;
	lda     #$00
	sta     _redFlag
;
; dxRed = -dxRed;
;
	lda     _dxRed
	ldx     _dxRed+1
	jsr     negax
	sta     _dxRed
	stx     _dxRed+1
;
; dyRed = -dyRed;
;
	lda     _dyRed
	ldx     _dyRed+1
	jsr     negax
	sta     _dyRed
	stx     _dyRed+1
;
; redTime = RED_TIME;
;
	lda     #$FF
	sta     _redTime
;
; ++powerBonus;
;
	inc     _powerBonus
;
; sfx_play(5, 0);
;
	lda     #$05
;
; } else if (val == CHERRY) {
;
	jmp     L002D
L0024:	lda     _val
	cmp     _CHERRY
	bne     L0025
;
; ++cherryBonus;
;
	inc     _cherryBonus
;
; sfx_play(3, 0);
;
	lda     #$03
L002D:	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; i = pacGirlX;
;
L0025:	lda     _pacGirlX
	sta     _i
;
; j = pacGirlY;
;
	lda     _pacGirlY
	sta     _j
;
; isNotWallOrDoor();
;
	jsr     _isNotWallOrDoor
;
; if (val) {
;
	lda     _val
	beq     L0017
;
; oldPacGirlVal = val;
;
	sta     _oldPacGirlVal
;
; i = oldPacGirlX;
;
	lda     _oldPacGirlX
	sta     _i
;
; j = oldPacGirlY;
;
	lda     _oldPacGirlY
	sta     _j
;
; val = EMPTY;
;
	lda     _EMPTY
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; drawBlackBox();
;
	jsr     _drawBlackBox
;
; } else {
;
	jmp     L0018
;
; pacGirlY = oldPacGirlY;
;
L0017:	lda     _oldPacGirlY+1
	sta     _pacGirlY+1
	lda     _oldPacGirlY
	sta     _pacGirlY
;
; pacGirlX = oldPacGirlX;
;
	lda     _oldPacGirlX+1
	sta     _pacGirlX+1
	lda     _oldPacGirlX
	sta     _pacGirlX
;
; dxPacGirl = 0;
;
	lda     #$00
	sta     _dxPacGirl
	sta     _dxPacGirl+1
;
; dyPacGirl = 0;
;
	sta     _dyPacGirl
	sta     _dyPacGirl+1
;
; i = pacGirlX;
;
L0018:	lda     _pacGirlX
	sta     _i
;
; j = pacGirlY;
;
	lda     _pacGirlY
	sta     _j
;
; val = PACGIRL;
;
	lda     _PACGIRL
	sta     _val
;
; setValToMap();   
;
	jsr     _setValToMap
;
; if (food100 == 2 && food010 == 7 && food001 == 1 && powerBonus == 4) {
;
	lda     _food100
	cmp     #$02
	bne     L0019
	lda     _food010
	cmp     #$07
	bne     L0019
	lda     _food001
	cmp     #$01
	bne     L0019
	lda     _powerBonus
	cmp     #$04
	bne     L0019
;
; music_play(1);
;
	lda     #$01
	jsr     _music_play
;
; calcScore();
;
	jsr     _calcScore
;
; return 0;
;
	ldx     #$00
	txa
	rts
;
; if (pacmanLooser()) {
;
L0019:	jsr     _pacmanLooser
	stx     tmp1
	ora     tmp1
	beq     L001D
;
; music_play(2);
;
	lda     #$02
	jsr     _music_play
;
; return 0;
;
	ldx     #$00
	txa
	rts
;
; oldPacGirlX = pacGirlX;
;
L001D:	lda     _pacGirlX+1
	sta     _oldPacGirlX+1
	lda     _pacGirlX
	sta     _oldPacGirlX
;
; oldPacGirlY = pacGirlY;
;
	lda     _pacGirlY+1
	sta     _oldPacGirlY+1
	lda     _pacGirlY
	sta     _oldPacGirlY
;
; return 1;
;
L0029:	ldx     #$00
L0028:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ actions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_actions: near

.segment	"CODE"

;
; if (STATE_SELECT == gameState) {
;
	lda     _STATE_SELECT
	cmp     _gameState
	jne     L004F
;
; if ((pad1 & PAD_START) || (pad2 & PAD_START) && playersTime == 0) {   
;
	lda     _pad1
	and     #$10
	bne     L003B
	lda     _pad2
	and     #$10
	beq     L003C
	lda     _playersTime
	bne     L003C
;
; music_stop();
;
L003B:	jsr     _music_stop
;
; if (players == 1) {
;
	lda     _players
	cmp     #$01
	bne     L0007
;
; i = pacGirlX;
;
	lda     _pacGirlX
	sta     _i
;
; j = pacGirlY;
;
	lda     _pacGirlY
	sta     _j
;
; val = FOOD;
;
	lda     _FOOD
	sta     _val
;
; setValToMap();
;
	jsr     _setValToMap
;
; } else {
;
	jmp     L0008
;
; incFood();
;
L0007:	jsr     _incFood
;
; gameState = STATE_GAME;
;
L0008:	lda     _STATE_GAME
	sta     _gameState
;
; drawBackground();
;
	jmp     _drawBackground
;
; if (((pad1 & PAD_SELECT) || (pad2 & PAD_SELECT)) && (playersTime == 0)) {
;
L003C:	lda     _pad1
	and     #$20
	bne     L003D
	lda     _pad2
	and     #$20
	beq     L0042
L003D:	lda     _playersTime
	bne     L0042
;
; playersTime = 30;
;
	lda     #$1E
	sta     _playersTime
;
; if (players == 1) {
;
	lda     _players
	cmp     #$01
	bne     L0041
;
; players = 2;
;
	lda     #$02
	sta     _players
;
; } else {
;
	rts
;
; players = 1;
;
L0041:	lda     #$01
	sta     _players
;
; return;
;
	rts
;
; if (((pad1 & PAD_DOWN) || (pad2 & PAD_DOWN)) && (players == 1)) {
;
L0042:	lda     _pad1
	and     #$04
	bne     L0043
	lda     _pad2
	and     #$04
	beq     L0049
L0043:	lda     _players
	cmp     #$01
	bne     L0049
;
; players = 2;
;
	lda     #$02
	sta     _players
;
; return;
;
	rts
;
; if (((pad1 & PAD_UP) || (pad2 & PAD_UP)) && (players == 2)) {
;
L0049:	lda     _pad1
	and     #$08
	bne     L004A
	lda     _pad2
	and     #$08
	beq     L004E
L004A:	lda     _players
	cmp     #$02
	bne     L004E
;
; players = 1;
;
	lda     #$01
	sta     _players
;
; return;
;
	rts
;
; if (playersTime > 0) {
;
L004E:	lda     _playersTime
	beq     L004F
;
; --playersTime;
;
	dec     _playersTime
;
; if (STATE_GAME == gameState) {     
;
L004F:	lda     _STATE_GAME
	cmp     _gameState
	jne     L005B
;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L0050
;
; dx = -1;
;
	lda     #$FF
	sta     _dx
	sta     _dx+1
;
; dy = 0; 
;
	lda     #$00
	sta     _dy
	sta     _dy+1
;
; if (pad1 & PAD_RIGHT) {
;
L0050:	lda     _pad1
	and     #$01
	beq     L0051
;
; dx = 1;
;
	ldx     #$00
	lda     #$01
	sta     _dx
	stx     _dx+1
;
; dy = 0;
;
	txa
	sta     _dy
	sta     _dy+1
;
; if (pad1 & PAD_UP) {
;
L0051:	lda     _pad1
	and     #$08
	beq     L0052
;
; dy = -1;
;
	lda     #$FF
	sta     _dy
	sta     _dy+1
;
; dx = 0;
;
	lda     #$00
	sta     _dx
	sta     _dx+1
;
; if (pad1 & PAD_DOWN) {
;
L0052:	lda     _pad1
	and     #$04
	beq     L0053
;
; dy = 1;
;
	ldx     #$00
	lda     #$01
	sta     _dy
	stx     _dy+1
;
; dx = 0;
;
	txa
	sta     _dx
	sta     _dx+1
;
; if (pad2 & PAD_UP) {
;
L0053:	lda     _pad2
	and     #$08
	beq     L0054
;
; dyPacGirl = -1;
;
	lda     #$FF
	sta     _dyPacGirl
	sta     _dyPacGirl+1
;
; dxPacGirl = 0;
;
	lda     #$00
	sta     _dxPacGirl
	sta     _dxPacGirl+1
;
; if (pad2 & PAD_DOWN) {
;
L0054:	lda     _pad2
	and     #$04
	beq     L0055
;
; dyPacGirl = 1;
;
	ldx     #$00
	lda     #$01
	sta     _dyPacGirl
	stx     _dyPacGirl+1
;
; dxPacGirl = 0;
;
	txa
	sta     _dxPacGirl
	sta     _dxPacGirl+1
;
; if (pad2 & PAD_LEFT) {
;
L0055:	lda     _pad2
	and     #$02
	beq     L0056
;
; dxPacGirl = -1;
;
	lda     #$FF
	sta     _dxPacGirl
	sta     _dxPacGirl+1
;
; dyPacGirl = 0;
;
	lda     #$00
	sta     _dyPacGirl
	sta     _dyPacGirl+1
;
; if (pad2 & PAD_RIGHT) {
;
L0056:	lda     _pad2
	and     #$01
	beq     L0026
;
; dxPacGirl = 1;
;
	ldx     #$00
	lda     #$01
	sta     _dxPacGirl
	stx     _dxPacGirl+1
;
; dyPacGirl = 0;
;
	txa
	sta     _dyPacGirl
	sta     _dyPacGirl+1
;
; if (!pacManState()) {
;
L0026:	jsr     _pacManState
	stx     tmp1
	ora     tmp1
	bne     L0027
;
; gameState = STATE_RESULT;
;
	lda     _STATE_RESULT
	sta     _gameState
;
; return;
;
	rts
;
; if (!redState()) {
;
L0027:	jsr     _redState
	stx     tmp1
	ora     tmp1
	bne     L0028
;
; gameState = STATE_RESULT;
;
	lda     _STATE_RESULT
	sta     _gameState
;
; return;
;
	rts
;
; if (!pacGirlState()) {
;
L0028:	jsr     _pacGirlState
	stx     tmp1
	ora     tmp1
	bne     L0029
;
; gameState = STATE_RESULT;
;
	lda     _STATE_RESULT
	sta     _gameState
;
; return;
;
	rts
;
; if (pacmanLastUpdateTime > 0 ) {
;
L0029:	lda     _pacmanLastUpdateTime
	beq     L0057
;
; --pacmanLastUpdateTime;
;
	dec     _pacmanLastUpdateTime
;
; if (redLastUpdateTime > 0) {
;
L0057:	lda     _redLastUpdateTime
	beq     L0058
;
; --redLastUpdateTime;
;
	dec     _redLastUpdateTime
;
; if (pacGirlLastUpdateTime > 0) {
;
L0058:	lda     _pacGirlLastUpdateTime
	beq     L0059
;
; --pacGirlLastUpdateTime;
;
	dec     _pacGirlLastUpdateTime
;
; if (cherryTime > 0) {
;
L0059:	lda     _cherryTime
	beq     L005A
;
; --cherryTime;
;
	dec     _cherryTime
;
; if (redTime > 0) {
;
L005A:	lda     _redTime
	beq     L005B
;
; --redTime;
;
	dec     _redTime
;
; if (STATE_RESULT == gameState && ((pad1 & PAD_START) || (pad2 & PAD_START))) {
;
L005B:	lda     _STATE_RESULT
	cmp     _gameState
	bne     L005E
	lda     _pad1
	and     #$10
	bne     L0061
	lda     _pad2
	and     #$10
	bne     L0061
	rts
L005E:	rts
;
; if (food100 == 2 && food010 == 7 && food001 == 1 && powerBonus == 4) {
;
L0061:	lda     _food100
	cmp     #$02
	bne     L0064
	lda     _food010
	cmp     #$07
	bne     L0064
	lda     _food001
	cmp     #$01
	bne     L0064
	lda     _powerBonus
	cmp     #$04
	bne     L0064
;
; music_play(3);
;
	lda     #$03
	jsr     _music_play
;
; gameState = STATE_SELECT;
;
L0064:	lda     _STATE_SELECT
	sta     _gameState
;
; playersTime = 30;
;
	lda     #$1E
	sta     _playersTime
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; drawBackground();
;
	jsr     _drawBackground
;
; init();
;
	jmp     _init

.endproc

; ---------------------------------------------------------------
; void __near__ draw (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw: near

.segment	"CODE"

;
; getValFromMap();
;
	jsr     _getValFromMap
;
; x = (i << 3) + 4;
;
	lda     _i
	asl     a
	asl     a
	asl     a
	clc
	adc     #$04
	sta     _x
;
; y = ((j + 1) << 3) - 3;
;
	lda     _j
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$03
	sta     _y
;
; if ( val == PACMAN ) {
;
	lda     _val
	cmp     _PACMAN
	jne     L006A
;
; if (pacmanSprite == 1) {
;
	lda     _pacmanSprite
	cmp     #$01
	jne     L0068
;
; if (pacmanLastUpdateTime == 0) {
;
	lda     _pacmanLastUpdateTime
	bne     L0007
;
; pacmanSprite = 2;
;
	lda     #$02
	sta     _pacmanSprite
;
; if (dx < 0) {
;
L0007:	ldx     _dx+1
	cpx     #$80
	bcc     L0008
;
; oam_meta_spr(x, y, PACMAN_L1);                
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_L1)
	ldx     #>(_PACMAN_L1)
;
; } else if (dx > 0) {
;
	jmp     _oam_meta_spr
L0008:	lda     _dx
	cmp     #$01
	lda     _dx+1
	sbc     #$00
	bvs     L000B
	eor     #$80
L000B:	bpl     L000A
;
; oam_meta_spr(x, y, PACMAN_R1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_R1)
	ldx     #>(_PACMAN_R1)
;
; } else if (dy < 0) {
;
	jmp     _oam_meta_spr
L000A:	ldx     _dy+1
	cpx     #$80
	bcc     L000D
;
; oam_meta_spr(x, y, PACMAN_UP1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_UP1)
	ldx     #>(_PACMAN_UP1)
;
; } else if (dy > 0) {
;
	jmp     _oam_meta_spr
L000D:	lda     _dy
	cmp     #$01
	lda     _dy+1
	sbc     #$00
	bvs     L0010
	eor     #$80
L0010:	bpl     L000F
;
; oam_meta_spr(x, y, PACMAN_D1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_D1)
	ldx     #>(_PACMAN_D1)
;
; } else {
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(x, y, PACMAN_0);                
;
L000F:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_0)
	ldx     #>(_PACMAN_0)
;
; } else if (pacmanSprite == 2) {
;
	jmp     _oam_meta_spr
L0068:	lda     _pacmanSprite
	cmp     #$02
	jne     L0069
;
; if (pacmanLastUpdateTime == 0) {
;
	lda     _pacmanLastUpdateTime
	bne     L0014
;
; pacmanSprite = 3;
;
	lda     #$03
	sta     _pacmanSprite
;
; if (dx < 0) {
;
L0014:	ldx     _dx+1
	cpx     #$80
	bcc     L0015
;
; oam_meta_spr(x, y, PACMAN_L2);                
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_L2)
	ldx     #>(_PACMAN_L2)
;
; } else if (dx > 0) {
;
	jmp     _oam_meta_spr
L0015:	lda     _dx
	cmp     #$01
	lda     _dx+1
	sbc     #$00
	bvs     L0018
	eor     #$80
L0018:	bpl     L0017
;
; oam_meta_spr(x, y, PACMAN_R2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_R2)
	ldx     #>(_PACMAN_R2)
;
; } else if (dy < 0) {
;
	jmp     _oam_meta_spr
L0017:	ldx     _dy+1
	cpx     #$80
	bcc     L001A
;
; oam_meta_spr(x, y, PACMAN_UP2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_UP2)
	ldx     #>(_PACMAN_UP2)
;
; } else if (dy > 0) {
;
	jmp     _oam_meta_spr
L001A:	lda     _dy
	cmp     #$01
	lda     _dy+1
	sbc     #$00
	bvs     L001D
	eor     #$80
L001D:	bpl     L001C
;
; oam_meta_spr(x, y, PACMAN_D2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_D2)
	ldx     #>(_PACMAN_D2)
;
; } else {
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(x, y, PACMAN_0);
;
L001C:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_0)
	ldx     #>(_PACMAN_0)
;
; } else if (pacmanSprite == 3) {
;
	jmp     _oam_meta_spr
L0069:	lda     _pacmanSprite
	cmp     #$03
	beq     L0073
;
; }
;
	rts
;
; if (pacmanLastUpdateTime == 0) {
;
L0073:	lda     _pacmanLastUpdateTime
	bne     L0021
;
; pacmanSprite = 1;
;
	lda     #$01
	sta     _pacmanSprite
;
; oam_meta_spr(x, y, PACMAN_0);
;
L0021:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACMAN_0)
	ldx     #>(_PACMAN_0)
;
; } else if (val == RED) {
;
	jmp     _oam_meta_spr
L006A:	lda     _val
	cmp     _RED
	jne     L006C
;
; if (redSprite == 1) {
;
	lda     _redSprite
	cmp     #$01
	jne     L006B
;
; if (redLastUpdateTime == 0) {
;
	lda     _redLastUpdateTime
	bne     L0025
;
; redSprite = 2;
;
	lda     #$02
	sta     _redSprite
;
; if (dxRed < 0) {
;
L0025:	ldx     _dxRed+1
	cpx     #$80
	bcc     L0026
;
; oam_meta_spr(x, y, RED_L1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_RED_L1)
	ldx     #>(_RED_L1)
;
; } else if (dxRed > 0) {
;
	jmp     _oam_meta_spr
L0026:	lda     _dxRed
	cmp     #$01
	lda     _dxRed+1
	sbc     #$00
	bvs     L0029
	eor     #$80
L0029:	bpl     L0028
;
; oam_meta_spr(x, y, RED_R1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_RED_R1)
	ldx     #>(_RED_R1)
;
; } else if (dyRed > 0) {
;
	jmp     _oam_meta_spr
L0028:	lda     _dyRed
	cmp     #$01
	lda     _dyRed+1
	sbc     #$00
	bvs     L002C
	eor     #$80
L002C:	bpl     L002B
;
; oam_meta_spr(x, y, RED_D1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_RED_D1)
	ldx     #>(_RED_D1)
;
; } else {
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(x, y, RED_UP1);
;
L002B:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_RED_UP1)
	ldx     #>(_RED_UP1)
;
; } else {
;
	jmp     _oam_meta_spr
;
; if (redLastUpdateTime == 0) {
;
L006B:	lda     _redLastUpdateTime
	bne     L002F
;
; redSprite = 1;
;
	lda     #$01
	sta     _redSprite
;
; if (dxRed < 0) {
;
L002F:	ldx     _dxRed+1
	cpx     #$80
	bcc     L0030
;
; oam_meta_spr(x, y, RED_L2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_RED_L2)
	ldx     #>(_RED_L2)
;
; } else if (dxRed > 0) {
;
	jmp     _oam_meta_spr
L0030:	lda     _dxRed
	cmp     #$01
	lda     _dxRed+1
	sbc     #$00
	bvs     L0033
	eor     #$80
L0033:	bpl     L0032
;
; oam_meta_spr(x, y, RED_R2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_RED_R2)
	ldx     #>(_RED_R2)
;
; } else if (dyRed > 0) {
;
	jmp     _oam_meta_spr
L0032:	lda     _dyRed
	cmp     #$01
	lda     _dyRed+1
	sbc     #$00
	bvs     L0036
	eor     #$80
L0036:	bpl     L0035
;
; oam_meta_spr(x, y, RED_D2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_RED_D2)
	ldx     #>(_RED_D2)
;
; } else {
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(x, y, RED_UP2);
;
L0035:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_RED_UP2)
	ldx     #>(_RED_UP2)
;
; } else if (val == PACGIRL) {
;
	jmp     _oam_meta_spr
L006C:	lda     _val
	cmp     _PACGIRL
	jne     L006F
;
; if (pacGirlSprite == 1) {
;
	lda     _pacGirlSprite
	cmp     #$01
	jne     L006D
;
; if (pacGirlLastUpdateTime == 0) {
;
	lda     _pacGirlLastUpdateTime
	bne     L003B
;
; pacGirlSprite = 2;
;
	lda     #$02
	sta     _pacGirlSprite
;
; if (dxPacGirl < 0) {
;
L003B:	ldx     _dxPacGirl+1
	cpx     #$80
	bcc     L003C
;
; oam_meta_spr(x, y, PACGIRL_L1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_L1)
	ldx     #>(_PACGIRL_L1)
;
; } else if (dxPacGirl > 0) {
;
	jmp     _oam_meta_spr
L003C:	lda     _dxPacGirl
	cmp     #$01
	lda     _dxPacGirl+1
	sbc     #$00
	bvs     L003F
	eor     #$80
L003F:	bpl     L003E
;
; oam_meta_spr(x, y, PACGIRL_R1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_R1)
	ldx     #>(_PACGIRL_R1)
;
; } else if (dyPacGirl < 0) {
;
	jmp     _oam_meta_spr
L003E:	ldx     _dyPacGirl+1
	cpx     #$80
	bcc     L0041
;
; oam_meta_spr(x, y, PACGIRL_UP1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_UP1)
	ldx     #>(_PACGIRL_UP1)
;
; } else if (dyPacGirl > 0) {
;
	jmp     _oam_meta_spr
L0041:	lda     _dyPacGirl
	cmp     #$01
	lda     _dyPacGirl+1
	sbc     #$00
	bvs     L0044
	eor     #$80
L0044:	bpl     L0043
;
; oam_meta_spr(x, y, PACGIRL_D1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_D1)
	ldx     #>(_PACGIRL_D1)
;
; } else {
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(x, y, PACGIRL_0);
;
L0043:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_0)
	ldx     #>(_PACGIRL_0)
;
; } else if (pacGirlSprite == 2) {
;
	jmp     _oam_meta_spr
L006D:	lda     _pacGirlSprite
	cmp     #$02
	jne     L006E
;
; if (pacGirlLastUpdateTime == 0) {
;
	lda     _pacGirlLastUpdateTime
	bne     L0048
;
; pacGirlSprite = 3;
;
	lda     #$03
	sta     _pacGirlSprite
;
; if (dxPacGirl < 0) {
;
L0048:	ldx     _dxPacGirl+1
	cpx     #$80
	bcc     L0049
;
; oam_meta_spr(x, y, PACGIRL_L2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_L2)
	ldx     #>(_PACGIRL_L2)
;
; } else if (dxPacGirl > 0) {
;
	jmp     _oam_meta_spr
L0049:	lda     _dxPacGirl
	cmp     #$01
	lda     _dxPacGirl+1
	sbc     #$00
	bvs     L004C
	eor     #$80
L004C:	bpl     L004B
;
; oam_meta_spr(x, y, PACGIRL_R2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_R2)
	ldx     #>(_PACGIRL_R2)
;
; } else if (dyPacGirl < 0) {
;
	jmp     _oam_meta_spr
L004B:	ldx     _dyPacGirl+1
	cpx     #$80
	bcc     L004E
;
; oam_meta_spr(x, y, PACGIRL_UP2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_UP2)
	ldx     #>(_PACGIRL_UP2)
;
; } else if (dyPacGirl > 0) {
;
	jmp     _oam_meta_spr
L004E:	lda     _dyPacGirl
	cmp     #$01
	lda     _dyPacGirl+1
	sbc     #$00
	bvs     L0051
	eor     #$80
L0051:	bpl     L0050
;
; oam_meta_spr(x, y, PACGIRL_D2);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_D2)
	ldx     #>(_PACGIRL_D2)
;
; } else {
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(x, y, PACGIRL_0);
;
L0050:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_0)
	ldx     #>(_PACGIRL_0)
;
; } else if (pacGirlSprite == 3) {
;
	jmp     _oam_meta_spr
L006E:	lda     _pacGirlSprite
	cmp     #$03
	beq     L0074
;
; }
;
	rts
;
; if (pacGirlLastUpdateTime == 0) {
;
L0074:	lda     _pacGirlLastUpdateTime
	bne     L0055
;
; pacGirlSprite = 1;
;
	lda     #$01
	sta     _pacGirlSprite
;
; if (dxPacGirl != 0) {
;
L0055:	lda     _dxPacGirl
	ora     _dxPacGirl+1
	beq     L0056
;
; oam_meta_spr(x, y, PACGIRL_1);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_1)
	ldx     #>(_PACGIRL_1)
;
; } else {
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(x, y, PACGIRL_0);
;
L0056:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_0)
	ldx     #>(_PACGIRL_0)
;
; } else if (val == SHADOW) {
;
	jmp     _oam_meta_spr
L006F:	lda     _val
	cmp     _SHADOW
	bne     L0071
;
; if (redSprite == 1) {
;
	lda     _redSprite
	cmp     #$01
	bne     L0070
;
; if (redLastUpdateTime == 0) {
;
	lda     _redLastUpdateTime
	bne     L005C
;
; redSprite = 2;
;
	lda     #$02
	sta     _redSprite
;
; sfx_play(6, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; oam_meta_spr(x, y, SPIRIT1);
;
L005C:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_SPIRIT1)
	ldx     #>(_SPIRIT1)
;
; } else {
;
	jmp     _oam_meta_spr
;
; if (redLastUpdateTime == 0) {
;
L0070:	lda     _redLastUpdateTime
	bne     L005E
;
; redSprite = 1;
;
	lda     #$01
	sta     _redSprite
;
; sfx_play(8, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; oam_meta_spr(x, y, SPIRIT2);  
;
L005E:	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_SPIRIT2)
	ldx     #>(_SPIRIT2)
;
; } else if (val == CHERRY) {
;
	jmp     _oam_meta_spr
L0071:	lda     _val
	cmp     _CHERRY
	bne     L0072
;
; oam_meta_spr(x, y, CHERRY_SPR);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #<(_CHERRY_SPR)
	ldx     #>(_CHERRY_SPR)
;
; } else if (val == DOOR) {
;
	jmp     _oam_meta_spr
L0072:	lda     _val
	cmp     _DOOR
	bne     L0062
;
; oam_meta_spr(x, y + 8, DOOR_SPR);
;
	jsr     decsp2
	lda     _x
	ldy     #$01
	sta     (sp),y
	lda     _y
	clc
	adc     #$08
	dey
	sta     (sp),y
	lda     #<(_DOOR_SPR)
	ldx     #>(_DOOR_SPR)
	jmp     _oam_meta_spr
;
; }
;
L0062:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawBackground (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBackground: near

.segment	"CODE"

;
; ppu_off(); 
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; if (STATE_SELECT == gameState) {
;
	lda     _STATE_SELECT
	cmp     _gameState
	bne     L0002
;
; vram_unrle(n1);
;
	lda     #<(_n1)
	ldx     #>(_n1)
;
; } else {
;
	jmp     L0004
;
; vram_unrle(n2);  
;
L0002:	lda     #<(_n2)
	ldx     #>(_n2)
L0004:	jsr     _vram_unrle
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ drawSprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawSprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; if (STATE_SELECT == gameState) {
;
	lda     _STATE_SELECT
	cmp     _gameState
	bne     L0009
;
; if (players == 1) {
;
	lda     _players
	cmp     #$01
	bne     L0003
;
; oam_meta_spr(80, 109, PACMAN_R2);
;
	jsr     decsp2
	lda     #$50
	ldy     #$01
	sta     (sp),y
	lda     #$6D
	dey
	sta     (sp),y
	lda     #<(_PACMAN_R2)
	ldx     #>(_PACMAN_R2)
;
; } else {
;
	jmp     L0008
;
; oam_meta_spr(80, 124, PACGIRL_R2);   
;
L0003:	jsr     decsp2
	lda     #$50
	ldy     #$01
	sta     (sp),y
	lda     #$7C
	dey
	sta     (sp),y
	lda     #<(_PACGIRL_R2)
	ldx     #>(_PACGIRL_R2)
	jsr     _oam_meta_spr
;
; oam_meta_spr(162, 124, PACMAN_L2);
;
	jsr     decsp2
	lda     #$A2
	ldy     #$01
	sta     (sp),y
	lda     #$7C
	dey
	sta     (sp),y
	lda     #<(_PACMAN_L2)
	ldx     #>(_PACMAN_L2)
L0008:	jsr     _oam_meta_spr
;
; if (STATE_GAME == gameState || STATE_RESULT == gameState) {
;
L0009:	lda     _STATE_GAME
	cmp     _gameState
	beq     L000A
	lda     _STATE_RESULT
	cmp     _gameState
	beq     L000A
	rts
;
; refreshGame();     
;
L000A:	jmp     _refreshGame

.endproc

; ---------------------------------------------------------------
; void __near__ drawText (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawText: near

.segment	"CODE"

;
; if (STATE_GAME == gameState || STATE_RESULT == gameState) {
;
	lda     _STATE_GAME
	cmp     _gameState
	beq     L0015
	lda     _STATE_RESULT
	cmp     _gameState
	bne     L0016
;
; text = cherryBonus + '0';
;
L0015:	lda     _cherryBonus
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(7,27));
;
	jsr     pusha
	ldx     #$23
	lda     #$67
	jsr     _one_vram_buffer
;
; text = redBonus + '0';
;
	lda     _redBonus
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(7,25));
;
	jsr     pusha
	ldx     #$23
	lda     #$27
	jsr     _one_vram_buffer
;
; text = powerBonus + '0';
;
	lda     _powerBonus
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(24,27));
;
	jsr     pusha
	ldx     #$23
	lda     #$78
	jsr     _one_vram_buffer
;
; text = food100 + '0';
;
	lda     _food100
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(24,25));
;
	jsr     pusha
	ldx     #$23
	lda     #$38
	jsr     _one_vram_buffer
;
; text = food010 + '0';
;
	lda     _food010
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(25,25));
;
	jsr     pusha
	ldx     #$23
	lda     #$39
	jsr     _one_vram_buffer
;
; text = food001 + '0';
;
	lda     _food001
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(26,25));
;
	jsr     pusha
	ldx     #$23
	lda     #$3A
	jsr     _one_vram_buffer
;
; if (STATE_RESULT == gameState) {
;
L0016:	lda     _STATE_RESULT
	cmp     _gameState
	beq     L001D
;
; }
;
	rts
;
; if (food100 == 2 && food010 == 7 && food001 == 1 && powerBonus == 4) {
;
L001D:	lda     _food100
	cmp     #$02
	bne     L0019
	lda     _food010
	cmp     #$07
	bne     L0019
	lda     _food001
	cmp     #$01
	bne     L0019
	lda     _powerBonus
	cmp     #$04
	bne     L0019
;
; one_vram_buffer(0xb3, NTADR_A(11,25));
;
	lda     #$B3
	jsr     pusha
	ldx     #$23
	lda     #$2B
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xbc, NTADR_A(12,25)); 
;
	lda     #$BC
	jsr     pusha
	ldx     #$23
	lda     #$2C
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xb0, NTADR_A(14,25)); 
;
	lda     #$B0
	jsr     pusha
	ldx     #$23
	lda     #$2E
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xaf, NTADR_A(15,25)); 
;
	lda     #$AF
	jsr     pusha
	ldx     #$23
	lda     #$2F
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xa1, NTADR_A(16,25)); 
;
	lda     #$A1
	jsr     pusha
	ldx     #$23
	lda     #$30
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xa5, NTADR_A(17,25)); 
;
	lda     #$A5
	jsr     pusha
	ldx     #$23
	lda     #$31
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xa4, NTADR_A(18,25));    
;
	lda     #$A4
	jsr     pusha
	ldx     #$23
	lda     #$32
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xa9, NTADR_A(19,25)); 
;
	lda     #$A9
	jsr     pusha
	ldx     #$23
	lda     #$33
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xac, NTADR_A(20,25)); 
;
	lda     #$AC
;
; } else {
;
	jmp     L001C
;
; one_vram_buffer(0xab, NTADR_A(11,25));
;
L0019:	lda     #$AB
	jsr     pusha
	ldx     #$23
	lda     #$2B
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xaf, NTADR_A(12,25)); 
;
	lda     #$AF
	jsr     pusha
	ldx     #$23
	lda     #$2C
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xae, NTADR_A(13,25)); 
;
	lda     #$AE
	jsr     pusha
	ldx     #$23
	lda     #$2D
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xa5, NTADR_A(14,25)); 
;
	lda     #$A5
	jsr     pusha
	ldx     #$23
	lda     #$2E
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xb7, NTADR_A(15,25)); 
;
	lda     #$B7
	jsr     pusha
	ldx     #$23
	lda     #$2F
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xa9, NTADR_A(17,25)); 
;
	lda     #$A9
	jsr     pusha
	ldx     #$23
	lda     #$31
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xa3, NTADR_A(18,25)); 
;
	lda     #$A3
	jsr     pusha
	ldx     #$23
	lda     #$32
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xb1, NTADR_A(19,25));    
;
	lda     #$B1
	jsr     pusha
	ldx     #$23
	lda     #$33
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xbc, NTADR_A(20,25)); 
;
	lda     #$BC
L001C:	jsr     pusha
	ldx     #$23
	lda     #$34
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xaf, NTADR_A(12,27));
;
	lda     #$AF
	jsr     pusha
	ldx     #$23
	lda     #$6C
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xb8, NTADR_A(13,27)); 
;
	lda     #$B8
	jsr     pusha
	ldx     #$23
	lda     #$6D
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xab, NTADR_A(14,27)); 
;
	lda     #$AB
	jsr     pusha
	ldx     #$23
	lda     #$6E
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xa9, NTADR_A(15,27));   
;
	lda     #$A9
	jsr     pusha
	ldx     #$23
	lda     #$6F
	jsr     _one_vram_buffer
;
; text = score100 + '0';
;
	lda     _score100
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(17,27));
;
	jsr     pusha
	ldx     #$23
	lda     #$71
	jsr     _one_vram_buffer
;
; text = score010 + '0';
;
	lda     _score010
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(18,27));
;
	jsr     pusha
	ldx     #$23
	lda     #$72
	jsr     _one_vram_buffer
;
; text = score001 + '0';
;
	lda     _score001
	clc
	adc     #$30
	sta     _text
;
; one_vram_buffer(text, NTADR_A(19,27));
;
	jsr     pusha
	ldx     #$23
	lda     #$73
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ drawBlackBox (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawBlackBox: near

.segment	"CODE"

;
; x = (i << 3) + 8;
;
	lda     _i
	asl     a
	asl     a
	asl     a
	clc
	adc     #$08
	sta     _x
;
; y = ((j + 1) << 3);
;
	lda     _j
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	sta     _y
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(0, address); 
;
	lda     #$00
	jsr     pusha
	lda     _address
	ldx     _address+1
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ refreshGame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_refreshGame: near

.segment	"CODE"

;
; if (!cherryFlag && redTime == 0 && !cherryBonus && cherryTime == 0) {
;
	lda     _cherryFlag
	bne     L0002
	lda     _redTime
	bne     L0002
	lda     _cherryBonus
	bne     L0002
	lda     _cherryTime
	bne     L0002
;
; openDoors();
;
	jsr     _openDoors
;
; if (refreshDoor) {          
;
L0002:	lda     _refreshDoor
	beq     L0008
;
; i = doorX;
;
	lda     _doorX
	sta     _i
;
; j = doorY; 
;
	lda     _doorY
	sta     _j
;
; getValFromMap();
;
	jsr     _getValFromMap
;
; if (val != DOOR) {
;
	lda     _val
	cmp     _DOOR
	beq     L0007
;
; refreshDoor = 0;
;
	lda     #$00
	sta     _refreshDoor
;
; } else {
;
	jmp     L0008
;
; draw();
;
L0007:	jsr     _draw
;
; if (refreshCherry) {  
;
L0008:	lda     _refreshCherry
	beq     L000E
;
; i = cherryX;
;
	lda     _cherryX
	sta     _i
;
; j = cherryY;   
;
	lda     _cherryY
	sta     _j
;
; getValFromMap();
;
	jsr     _getValFromMap
;
; if (val != CHERRY) {
;
	lda     _val
	cmp     _CHERRY
	beq     L000A
;
; refreshCherry = 0;
;
	lda     #$00
	sta     _refreshCherry
;
; } else {
;
	jmp     L000E
;
; draw();
;
L000A:	jsr     _draw
;
; i = redX;
;
L000E:	lda     _redX
	sta     _i
;
; j = redY;     
;
	lda     _redY
	sta     _j
;
; draw();   
;
	jsr     _draw
;
; i = pacmanX;
;
	lda     _pacmanX
	sta     _i
;
; j = pacmanY;     
;
	lda     _pacmanY
	sta     _j
;
; draw();
;
	jsr     _draw
;
; i = pacGirlX;
;
	lda     _pacGirlX
	sta     _i
;
; j = pacGirlY;  
;
	lda     _pacGirlY
	sta     _j
;
; draw();
;
	jmp     _draw

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; set_rand(66);
;
	ldx     #$00
	lda     #$42
	jsr     _set_rand
;
; ppu_off(); 
;
	jsr     _ppu_off
;
; pal_bg(paletteForBackground);
;
	lda     #<(_paletteForBackground)
	ldx     #>(_paletteForBackground)
	jsr     _pal_bg
;
; pal_spr(paletteForSprites);
;
	lda     #<(_paletteForSprites)
	ldx     #>(_paletteForSprites)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); 
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; drawBackground();
;
	jsr     _drawBackground
;
; music_play(0);
;
	lda     #$00
	jsr     _music_play
;
; set_vram_buffer(); 
;
	jsr     _set_vram_buffer
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad2 = pad_poll(1); 
;
	lda     #$01
	jsr     _pad_poll
	sta     _pad2
;
; drawText();
;
	jsr     _drawText
;
; actions();     
;
	jsr     _actions
;
; drawSprites();
;
	jsr     _drawSprites
;
; while (1) {  
;
	jmp     L0002

.endproc

